<?xml version="1.0"?>
<types xmlns="http://www.qeo.org/formal/2013/Qeo_Data_Model" version="0.10">
  <include file="qeo_types.xml"/>
  <!-- version 0.10 -->
  <module name="com::technicolor::wifidoctor">
    <struct name="AssociatedStationStats">
      <member name="MACAddress" type="string">
        <doc>MAC address associated with station</doc>
      </member>
      <member name="RSSI" type="int32">
        <doc>expressed in dBm</doc>
      </member>
      <member name="avgSpatialStreamsTX" type="int16">
        <doc>
			fixed point 3 decimals. Average of # spatial streams used in TX direction.
		</doc>
      </member>
      <member name="avgSpatialStreamsRX" type="int16">
        <doc>fixed point 3 decimals. Average of # spatial streams used in RX direction. </doc>
      </member>
      <member name="avgUsedBandwidthTX" type="int16">
        <doc>fixed point 3 decimals. Average signal bandwidth used in TX direction. </doc>
      </member>
      <member name="avgUsedBandwidthRX" type="int16">
        <doc>fixed point 3 decimals. Average signal bandwidth used in TX direction.</doc>
      </member>
      <member name="trainedPhyRateTX" type="int32">
		    <doc>kbps.  PhyRate used under traffic in TX direction. </doc>
      </member>
      <member name="trainedPhyRateRX" type="int32">
		    <doc>kbps.  PhyRate used under traffic in RX direction.</doc>
      </member>
      <member name="dataRateTX" type="int32">
	  	<doc>kbps.  Datarate in TX direction. </doc>
      </member>
      <member name="dataRateRX" type="int32">
		<doc>kbps.  Datarate in RX direction. </doc>	  
      </member>
      <member name="powerSaveTimeFraction" type="int16">
		<doc>Integer percentage. Fraction of time that the Station spends in Power Save mode. </doc>	  
      </member>
    </struct>
    <struct name="APStats">
      <member name="MACAddress" type="string">
        <doc>MAC address associated with BSSID</doc>
      </member>
      <member name="TXTimeFraction" type="int16"> 
        <doc>Integer percentage. Fraction of time spent transmitting packets.</doc> 
      </member>
      <member name="RXTimeFractionIBSS" type="int16">
        <doc>Integer percentage.  Fraction of time spent receiving packets from inside the BSSID.</doc>
      </member>
      <member name="RXTimeFractionOBSS" type="int16">
        <doc>Integer percentage.  Fraction of time spent receiving packets from outside the BSSID.</doc>
      </member>
      <member name="associatedStationStats" type="nonBasic" nonBasicTypeName="AssociatedStationStats" sequenceMaxLength="-1">
        <doc>statistics per associated station</doc>
      </member>
    </struct>
    <struct name="STAStats">
      <member name="MACAddress" type="string"/>
      <member name="RSSI" type="int32">
        <doc>
		  expressed in dBm.  Note that this value is a filtered average 
		  - only taking into account RSSI samples taken when traffic is flowing.
		</doc>
      </member>
    </struct>
    <struct name="RadioStats" behavior="state">
              <member name="radio" type="nonBasic" nonBasicTypeName="org::qeo::UUID" key="true">
        <doc>
            ID of the wifi radio. Basically a random number, assumed to be unique over the whole Qeo realm.
            In the future, we'd probably use a UUID here but for the POC that's a bit overkill.
    </doc>
      </member>
        
      <member name="testId" type="int32" key="true">
        <doc>
          ID of the TestRequest for which these stats are published.
          A value of 0 indicates these are passive monitoring stats,
          not associated with a specific test request
      </doc>
      </member>
      <member name="timestamp" type="int64">
        <doc>Seconds since Jan 1, 1970</doc>
      </member>
      <member name="mediumAvailable" type="int16">
        <doc>
			Integer percentage. Fraction of time that the medium is assessed available by the CCA of the wifi radio.
			For radios for which we cannot derive this statistic, use -1 as a sentinel value.
		</doc>
      </member>
      <member name="APStats" type="nonBasic" nonBasicTypeName="APStats" sequenceMaxLength="-1"/>
      <member name="STAStats" type="nonBasic" nonBasicTypeName="STAStats" sequenceMaxLength="-1"/>
    </struct>
    <struct name="TestRequest" behavior="state">
      <doc>A coordinator (typically the WifiDr Android app on the STA, but not 
         necessarily) publishes a TestRequest to trigger a test between an AP
         and a STA. As long as the TestRequest instance lives, the test is 
	 relevant and will be (eventually) carried out, or the results will
	 remain available. When the TestRequest instance is removed, all other traces
	 of the test (test states, results) will be removed as well.
      </doc>
      <member name="id" type="int32" key="true"/>
      <member name="sourceMAC" type="string">
        <doc>MAC address of the transmitting node for this test</doc>
      </member>
      <member name="destinationMAC" type="string">
        <doc>MAC address of the receiving node for this test</doc>
      </member>
      <member name="type" type="int32">
        <doc>The test type. This is a poor man's substitute for an enumeration.
         Possible values are:
            0: PING test
            1: TX test
        </doc>
      </member>
      <!-- since we don't support union types yet in Qeo, we need to make do 
         with more primitive solutions: below I list all setup parameters
         for both the ping and TX tests. Assume only the ones relevant
         to the indicated test type are relevant and filled in. -->
      <!-- test parameters -->
      <member name="duration" type="int32">
        <doc>test duration in seconds (0 &lt;= x &lt;= 86400)</doc>
      </member>
      <member name="packetSize" type="int16">
        <doc>TX test parameter (64 &lt;= x &lt;= 2346)
	     ping test: 0 &lt;= x &lt;= 20000
	</doc>
      </member>
      <member name="WMMClass" type="int16">
        <doc>
			TX test parameter (0 &lt;= x &lt;= 4)
			0 = Background
			1 = Best Effort
			2 = Video
			3 = Voice
		</doc>
      </member>
    </struct>
    <struct name="TestState" behavior="state">
      <member name="id" type="int32" key="true">
        <doc>id of the corresponding TestRequest</doc>
      </member>
      <member name="participantMAC" type="string" key="true">
        <doc>MAC address of the test participant publishing this test state</doc>
      </member>
      <member name="state" type="int32">
        <doc>
          This should be an enum really. Possible values:
            0 = QUEUED: acknowledge we've seen the test request, but it is not yet
                        ready for execution
            1 = WILLING: RX node indicates it is ready to participate in the test,
                         waits for a COMMIT from the TX node before starting
            2 = COMMIT: TX node indicates it is committed to starting the test,
                        waits for RX node to go to TESTING before actually starting
            3 = TESTING: test ongoing (for both RX and TX node)
            4 = DONE: test is finished, results will be published
            5 = REJECTED: node is unwilling to perform this test or aborting this test for some reason.
          For tests where both TX and RX node are WifiDr-capable, we assume the
          following sequence of states:
            Coordinator               TX node                 RX node
            ---------------------------------------------------------
            publish TestRequest       QUEUED                  QUEUED
                                                                 v  
                                        v                     WILLING
                                      COMMIT                     v
                                        v                     TESTING
                                      TESTING
                                        v
                     v                DONE                       v
            read TX node results                               DONE
            read RX node results
            remove TestRequest          v                        v
                                     remove TestState         remove TestState
      
          For "blind" tests (where the RX node is not WifiDr-capable), we assume
          the following sequence of states:
            Coordinator               TX node        
            -----------------------------------------
            publish TestRequest       QUEUED         
                                        v            
                                      TESTING
                                        v
                     v                DONE           
            read TX node results                     
            remove TestRequest          v            
                                     remove TestState
									 
		
		  Note that transition to REJECTED state can happen from all other states.
		  In reaction to this, the related Testrequest and TestState instances shall be removed.
    
          A TX node needs to decide which sequence to follow based on the following information.
            
            1.  The TX node sees a TestRequest with a sourceMAC and destinationMAC.
            2.  TX uses the destinationMAC and looks for a RadioStats state on Qeo that 
                has an STAStats member that contains the same MACAddress. 
            3.  In case TX cannot find such a state, we execute a "blind" test.
            4.  In case TX can find such a state, we execute a normal test.

        </doc>
      </member>
    </struct>
	<struct name="ChangeChannelRequest" behavior="event">
		<doc> Request to trigger a channel change to either a fixed channel or
			to an auto-selected channel. </doc>
		<member name="radio" type="nonBasic" nonBasicTypeName="org::qeo::UUID" />
		<member name="channel" type="int32">
			<doc> enumeration, possible values: 0 (for auto), 1-14 (2.4GHz
				channels) and
				36,40,44,48,52,56,60,64,100,104,108,112,116,120,124,128,132,136,140,149,153,157,161
				(5GHz channels). </doc>
		</member>
	</struct>
  </module>
</types>
