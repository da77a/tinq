<?xml version="1.0"?>
<types xmlns="http://www.qeo.org/formal/2013/Qeo_Data_Model" version="0.1">
  <include file="qeo_types.xml"/>
  <module name="org::qeo::networking::wifi">
    <doc>
      This QDM models a device's wireless interfaces.
      It is usable for both access points and stations.
      The data model is hierarchically structured:
      - one device (as identified by its Qeo Device ID) can have multiple
        Radios (= physical wifi interfaces)
      - for each Radio, multiple Interfaces (= logical interfaces) can be
        defined. Each of those Interfaces plays the role of either Station
        (STA) or Access Point (AP).
      - Interfaces that are APs have a list of Associated Stations.
      The Associated Station list may contain historical data (stations that
      were once associated with this access point but are currently not
      associated any more). Whether this is the case, and how much historical
      data is maintained, is up to the discretion of the implementer.

      On top of the aforementioned hierarchical model, the QDM also offers a
      way for interested parties to request a scan list from a Radio. A scan
      list is a list of all APs a given Radio (regardless of whether it acts
      as a STA or AP itself) sees in its neighbourhood. This is potentially
      useful information for WiFi troubleshooting or for indoor positioning
      use cases.
    </doc>
    <struct name="Radio" behavior="state">
      <doc>
        This topic represents a physical WiFi interface on a device
      </doc>
      <member name="id" type="nonBasic" nonBasicTypeName="org::qeo::UUID" key="true">
        <doc>Unique ID of the wifi radio.</doc>
      </member>
      <member name="deviceId" type="nonBasic" nonBasicTypeName="org::qeo::system::DeviceId">
        <doc>
          Qeo Device ID of the device this radio belongs to.  Useful in the
          case of multiple devices that play the Access Point role within one
          realm.  Qeo provides a built-in function to retrieve this Device ID.
        </doc>
      </member>
      <member name="channel" type="int32">
        <doc>
          enumeration, possible values: 1-14 (2.4GHz channels) and
          36,40,44,48,52,56,60,64,100,104,108,112,116,120,124,128,132,136,140,149,153,157,161
          (5GHz channels).  
        </doc>
      </member>
      <member name="capabilities" type="string">
        <doc>
          Formatted as a comma-separated value list with following fields:
          802.11standard, MIMOconfiguration TX x RX:SS, SignalBandwidth (MHz),
          Supported Bands, SGIcapable (y or no).
          e.g.  "a/b/g/n,2x3:2,20/40,2/5,y".  
        </doc>
      </member>
    </struct>
    <struct name="Interface" behavior="state">
      <doc>
        This topic defines a logical WiFi interface associated to a Radio.
        Such an interface plays the role of either client (Station) or 
        access point.
      </doc>
      <member name="macAddress" type="string" key="true">
        <doc>
          MAC address associated with the interface.
          If the interface is of type "access point", this is the BSSID.
          If the interface is of type "client", this is the client's MAC address.
        </doc>
      </member>
      <member name="radioId" type="nonBasic" nonBasicTypeName="org::qeo::UUID">
        <doc>
          Reference to the Radio object this Interface is attached to.
        </doc>
      </member>
      <member name="ssid" type="string">
        <doc>
          For access points, their network name.
          For clients, the network they are attached to.
        </doc>
      </member>
      <member name="type" type="int32">
        <doc>enum. Values are 0 = access point 1 = client (station)</doc>
      </member>
      <member name="enabled" type="boolean">
        <doc>Is this interface currently enabled?</doc>
      </member>
    </struct>
    <struct name="AssociatedStation" behavior="state">
      <doc>
        This topic lists each access point's associated stations.
        This is published on a separate topic (with each associated station as
        a separate instance) to facilitate notification of associating and
        disassociating stations. With this model, a simple StateChangeReader
        can alert you immediately when a station has associated or gone away.
        
        This topic must contain the current information, but may also contain
        historical data (i.e. stations that were once associated but have 
        gone away). It is up to the discretion of the implementer to decide
        whether, and how much, historical data is maintained.
      </doc>
      <member name="macAddress" type="string" key="true">
        <doc>the station's MAC address</doc>
      </member>
      <member name="bssid" type="string" key="true">
        <doc>
          BSSID the station is associated with. Refers to Interface.MACAddress.
          Note: key, since STA can connect (at different time) to different
          BSSIDs.
        </doc>
      </member>
      <member name="capabilities" type="string">
        <doc>
          802.11standard, MIMOconfiguration TX x RX:SS, SignalBandwidth,
          Supported Bands, SGIcapable.  E.g. "a/b/g/n,2x3:2,20/40,2/5,y".
        </doc>
      </member>
      <member name="associated" type="boolean">
        <doc>
          Is this station currently associated?
          If this flag is false, we're dealing with historical data.
        </doc>
      </member>
      <member name="lastSeen" type="int64">
        <doc>
          timestamp (seconds since 1970) when the station was last seen as
          associated
        </doc>
      </member>
      <member name="maxNegotiatedPhyRate" type="int32">
        <doc>in kbps</doc>
      </member>
    </struct>
    <struct name="ScanListEntry">
      <doc>
        This is a helper type representing a single entry in a scan list. It is
        not intended to be published on its own, but must be included as a
        member of some enclosing type.
      </doc>
      <member name="bssid" type="string"/>
      <member name="ssid" type="string"/>
      <member name="channel" type="int32">
        <doc>enum. Same values as Radio.channel</doc>
      </member>
      <member name="rssi" type="int32">
        <doc>in dBm</doc>
      </member>
    </struct>
    <struct name="ScanList" behavior="state">
      <doc>
        To be published at start-up, periodically (period left free; for AP
        after period scans as defined in ACS config), on request.
      </doc>
      <member name="radioId" type="nonBasic" nonBasicTypeName="org::qeo::UUID" key="true">
        <doc>the radio that published this scan list (can be either AP or STA)</doc>
      </member>
      <member name="list" type="nonBasic" nonBasicTypeName="ScanListEntry" sequenceMaxLength="-1">
        <doc>the scan list entries</doc>
      </member>
      <member name="timestamp" type="int64">
        <doc>Time of scan in seconds since Jan 1, 1970</doc>
      </member>
    </struct>
    <struct name="ScanRequest" behavior="event">
      <doc>
        Trigger a new scan and publication of the new scan list.
        ScanList entries from a previous scan for this radio will be removed as
        the new list is published.  It is important to note that a scan on AP
        side interrupts service (for a few seconds). 
      </doc>
      <member name="radioId" type="nonBasic" nonBasicTypeName="org::qeo::UUID"/>
    </struct>
  </module>
</types>
