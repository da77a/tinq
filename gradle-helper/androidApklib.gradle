

File eclipseOutDir = file("${buildDir}/${project.name}.apklib")


def ECLIPSE_PROJECT = '''
<projectDescription>
    <name></name>
    <comment/>
    <projects/>
    <natures>
        <nature>org.eclipse.jdt.core.javanature</nature>
        <nature>com.android.ide.eclipse.adt.AndroidNature</nature>
    </natures>
    <buildSpec>
        <buildCommand>
            <name>org.eclipse.jdt.core.javabuilder</name>
            <arguments/>
        </buildCommand>
        <buildCommand>
            <name>com.android.ide.eclipse.adt.ResourceManagerBuilder</name>
            <arguments/>
        </buildCommand>
        <buildCommand>
            <name>com.android.ide.eclipse.adt.PreCompilerBuilder</name>
            <arguments/>
        </buildCommand>
        <buildCommand>
            <name>com.android.ide.eclipse.adt.ApkBuilder</name>
            <arguments/>
        </buildCommand>
    </buildSpec>
    <linkedResources/>
</projectDescription>
'''

def ECLIPSE_CLASSPATH = '''
<classpath>
    <classpathentry kind="src" path="src"/>
    <classpathentry kind="src" path="gen">
        <attributes>
            <attribute name="ignore_optional_problems" value="true"/>
        </attributes>
        <attributes>
            <attribute name="ignore_optional_problems" value="true"/>
        </attributes>
    </classpathentry>
    <classpathentry kind="output" path="bin/eclipse/classes"/>
    <classpathentry kind="con" path="com.android.ide.eclipse.adt.ANDROID_FRAMEWORK" exported="true"/>
    <classpathentry kind="con" path="com.android.ide.eclipse.adt.LIBRARIES" exported="true"/>
</classpath>
'''

def ECLIPSE_SETTINGS_PREFS = '''
org.eclipse.jdt.core.compiler.debug.localVariable=generate
org.eclipse.jdt.core.compiler.compliance=1.6
org.eclipse.jdt.core.compiler.codegen.unusedLocal=preserve
org.eclipse.jdt.core.compiler.debug.sourceFile=generate
org.eclipse.jdt.core.compiler.codegen.targetPlatform=1.6
org.eclipse.jdt.core.compiler.problem.enumIdentifier=error
org.eclipse.jdt.core.compiler.debug.lineNumber=generate
eclipse.preferences.version=1
org.eclipse.jdt.core.compiler.codegen.inlineJsrBytecode=enabled
org.eclipse.jdt.core.compiler.source=1.6
org.eclipse.jdt.core.compiler.problem.assertIdentifier=error
'''

def ECLIPSE_PROJECT_PROPERTIES = ""
afterEvaluate {
    if (project.hasProperty("androidLibrary") && project.androidLibrary) {
        ECLIPSE_PROJECT_PROPERTIES += "android.library=true\n"
    }
    else {
        ECLIPSE_PROJECT_PROPERTIES += "android.library=false\n"
    }
    ECLIPSE_PROJECT_PROPERTIES += "target=android-" + android.defaultConfig.targetSdkVersion.apiLevel + "\n"
}

task apklibLayout() {
    description "Generate eclipse layout files for apklib"

    File fileProject = new File(eclipseOutDir, ".project")
    File fileClasspath = new File(eclipseOutDir, ".classpath")
    File dirSettings = new File(eclipseOutDir, ".settings")
    File filePrefs = new File(dirSettings, "org.eclipse.jdt.core.prefs")
    File dirGen = new File(eclipseOutDir, "gen")
    File fileProjectProperties = new File(eclipseOutDir, "project.properties")
    outputs.file fileProject
    outputs.file fileClasspath
    outputs.dir dirSettings
    outputs.dir dirGen
    doLast {
        buildDir.mkdir()
        eclipseOutDir.mkdir()
        dirSettings.mkdir()
        dirGen.mkdir()

        //.project
        //now do the real processing
        def root = new XmlSlurper().parseText(ECLIPSE_PROJECT)
        root.name = apklib.projectName
        //Save File
        def writer = new FileWriter(fileProject)
        groovy.xml.XmlUtil.serialize(root, writer)
        
        //.classpath
        root = new XmlSlurper().parseText(ECLIPSE_CLASSPATH)
        writer = new FileWriter(fileClasspath)
        groovy.xml.XmlUtil.serialize(root, writer)

        //settings
        filePrefs.text = ECLIPSE_SETTINGS_PREFS
        fileProjectProperties.text = ECLIPSE_PROJECT_PROPERTIES
    }
}

task apklibCopyEclipseLibs(type:Copy) {
    dependsOn apklibLayout
    ext.configs = []
    configs.add(configurations.compile)
    afterEvaluate {

        //copy all jar files from all dependencies
        configs.each { config ->
            config.each {
                if (it.name.endsWith(".aar")) {
                    return //exclude aar files, they won't work anyway.
                }
                if (it.name.startsWith("support-")) {
                    //throw out support libraries. Will not be an issue here since actionbarsherlock will provide them as dependency
                    logger.debug("Excluding ${it} as gradle support libraries are not compatible with eclipse")
                    return
                }
                if (it.name.startsWith("qeo-")) {
                    //not including qeo libraries, they're already in the sdk
                    return
                }
                from it
            }
        }
    }
    into "${eclipseOutDir}/libs"
}

task apklib(type: Zip) {

    ext.projectName = project.name
    ext.apklibName = true

    dependsOn apklibLayout, apklibCopyEclipseLibs
    afterEvaluate {
        dependsOn processReleaseManifest
    }
    from eclipseOutDir
    from (project.projectDir) {
        include "src/**"
        include "res/**"
        include "assets/**"
    }
    from ("${buildDir}/intermediates/bundles/release") {
        include "AndroidManifest.xml"
    }
    afterEvaluate {
        if (tasks.findByPath("generateTypes") != null) {
            dependsOn generateTypes
            from(generateTypes.typesDir) {
                into "src"
            }
        }
    }

    afterEvaluate {
        into projectName + (apklibName ? ".apklib" : "")
    }
    extension "apklib"
    classifier "eclipse"
}

// publish the apk to artifactory
artifacts {
    archives apklib
}

