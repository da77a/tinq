<?xml version="1.0" encoding="UTF-8"?>
<types xmlns="http://www.qeo.org/formal/2013/Qeo_Data_Model"
        xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
        xsi:schemaLocation="http://www.qeo.org/formal/2013/Qeo_Data_Model qeo_qdm.xsd" version="0.1">
        
  <module name="org::qeo">
    <!-- Qeo-defined annotations -->

    <!-- Default types -->
    
    <struct name="DeviceId">       
       <doc>this is the device ID generated by Qeo. </doc>
       <member name="upper" type="int64" />
       <member name="lower" type="int64" />
    </struct>
    
    <!-- disabled for now 
    <struct name="UUID">
      <doc>
        The Qeo UUID type. In essence, this is a simple 128-bit
        unsigned integer, but that is hard to represent in any
        programming language. Hence, we split it up into two
        64-bit fields. Java does not like unsigned types, so 
        for efficiency and convenience reasons, we declare the 
        subfields to be signed.
      </doc>
      <doc language="java">
        In Java, this type should be represented as java.util.UUID.
      </doc>
      <member name="high" type="int64" />
      <member name="low" type="int64" />
    </struct>
    -->

    <!--
    The intention is to provide common definitions for a number of 
    often-occurring data types, like DateTime, TimeInterval, TimeofDay,
    Temperature, etc.
    What is suggested below is not normative: rather it's a first exercise
    in how such a type library could look.
    -->
    <!-- disabled for now
    <typedef name="DateTime" type="int64">
      <doc>
        The canonical absolute date representation in Qeo,
        as seconds since the epoch. The epoch is defined as
        UTC1970-01-01T00:00:00
      </doc>
      <doc language="java">
        This type should be represented as a java.util.Date.
      </doc>
    </typedef>

    <struct name="TimeInterval">
      <doc>
        The canonical representation of a time interval
        in Qeo. For convenience in Java represented as 
        signed integers.
      </doc>
      <member name="seconds" type="int64" />
      <member name="nanoseconds" type="int32" />
    </struct>

    <struct name="GenericXRef">
      <doc>
        A generic way of referring to instances on another
        (a priori unknown) topic. Prerequisite is that the
        referred type has a field called id of type UUID.
        This is supposed to be a very common design pattern
        in Qeo.
      </doc>
      <member name="topic" type="string">
        <doc>
          The name of the topic (i.e. the fully qualified type name)
          that is referred to.
        </doc>
      </member>

      <member name="id" type="nonBasic" nonBasicTypeName="UUID">
        <doc>The UUID of the object instance to which is referred.</doc>
      </member>
    </struct>
    -->
  </module>
</types>
