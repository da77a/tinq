/*
 * Copyright (c) 2015 - Qeo LLC
 *
 * The source code form of this Qeo Open Source Project component is subject
 * to the terms of the Clear BSD license.
 *
 * You can redistribute it and/or modify it under the terms of the Clear BSD
 * License (http://directory.fsf.org/wiki/License:ClearBSD). See LICENSE file
 * for more details.
 *
 * The Qeo Open Source Project also includes third party Open Source Software.
 * See LICENSE file for more details.
 */

package org.qeo.deviceregistration.helper;

import java.util.Collection;

import com.google.api.client.auth.oauth2.TokenRequest;
import com.google.api.client.http.GenericUrl;
import com.google.api.client.http.HttpExecuteInterceptor;
import com.google.api.client.http.HttpRequestInitializer;
import com.google.api.client.http.HttpTransport;
import com.google.api.client.json.JsonFactory;
import com.google.api.client.util.Key;
import com.google.api.client.util.Preconditions;


/**
 * Class to to a custom token request using grant_type=https://oauth.qeo.org/jwt.<br>
 * As per https://tools.ietf.org/html/rfc6749#section-4.5
 */
public class JWTTokenRequest extends TokenRequest
{

    /** Authorization code received from the authorization server. */
    @Key("jwt_token")
    private String mJwtToken;

    /**
     * Redirect URI parameter matching the redirect URI parameter in the authorization request or
     * {@code null} for none.
     */
    @Key("redirect_uri")
    private String mRedirectUri;

    /**
     * Create a TokenRequest.
     * @param transport      HTTP transport
     * @param jsonFactory    JSON factory
     * @param tokenServerUrl token server URL
     * @param jwtToken       TWT token generated by the authorization server
     */
    public JWTTokenRequest(
        HttpTransport transport, JsonFactory jsonFactory, GenericUrl tokenServerUrl, String jwtToken)
    {
        super(transport, jsonFactory, tokenServerUrl, "https://oauth.qeo.org/jwt");
        setJWT(jwtToken);
    }

    @Override
    public JWTTokenRequest setRequestInitializer(
        HttpRequestInitializer requestInitializer)
    {
        return (JWTTokenRequest) super.setRequestInitializer(requestInitializer);
    }

    @Override
    public JWTTokenRequest setTokenServerUrl(GenericUrl tokenServerUrl)
    {
        return (JWTTokenRequest) super.setTokenServerUrl(tokenServerUrl);
    }

    @Override
    public JWTTokenRequest setScopes(Collection<String> scopes)
    {
        return (JWTTokenRequest) super.setScopes(scopes);
    }

    @Override
    public JWTTokenRequest setGrantType(String grantType)
    {
        return (JWTTokenRequest) super.setGrantType(grantType);
    }

    @Override
    public JWTTokenRequest setClientAuthentication(
        HttpExecuteInterceptor clientAuthentication)
    {
        return (JWTTokenRequest) super.setClientAuthentication(clientAuthentication);
    }

    /**
     * Returns the JWT code generated by the authorization server.
     * @return the JWT token.
     */
    public final String getJWT()
    {
        return mJwtToken;
    }

    /**
     * Sets the JWT code generated by the authorization server.
     * 
     * <p>
     * Overriding is only supported for the purpose of calling the super implementation and changing
     * the return type, but nothing else.
     * </p>
     * @param jwtToken The JWT token.
     * @return The TokenRequest
     */
    public JWTTokenRequest setJWT(String jwtToken)
    {
        mJwtToken = Preconditions.checkNotNull(jwtToken);
        return this;
    }

    /**
     * Returns the redirect URI parameter matching the redirect URI parameter in the authorization
     * request or {@code null} for none.
     * @return the redirect url
     */
    public final String getRedirectUri()
    {
        return mRedirectUri;
    }

    /**
     * Sets the redirect URI parameter matching the redirect URI parameter in the authorization
     * request or {@code null} for none.
     * 
     * <p>
     * Overriding is only supported for the purpose of calling the super implementation and changing
     * the return type, but nothing else.
     * </p>
     * @param redirectUri the redirect uri
     * @return The TokenRequest
     */
    public JWTTokenRequest setRedirectUri(String redirectUri)
    {
        mRedirectUri = redirectUri;
        return this;
    }

    @Override
    public JWTTokenRequest set(String fieldName, Object value)
    {
        return (JWTTokenRequest) super.set(fieldName, value);
    }
}

