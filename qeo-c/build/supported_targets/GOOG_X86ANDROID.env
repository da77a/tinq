# ANDROID_API =  3 can execute on Android 1.5
# ANDROID_API =  4 can execute on Android 1.6
# ANDROID_API =  5 can execute on Android 2.0
# ANDROID_API =  6 can execute on Android 2.0.1
# ANDROID_API =  7 can execute on Android 2.1
# ANDROID_API =  8 can execute on Android 2.2
# ANDROID_API =  9 can execute on Android 2.3
# ANDROID_API = 14 can execute on Android 4.0

# The target architecture
TARG_ARCH            := X86
ANDROID_ARCH         := x86
JNI_DIR		     := x86

# The target operating system
TARG_OS              := LINUX

# The compiler family
COMPILER             := GNU

ifndef ANDROID_NDK
$(shell echo Set the variable ANDROID_NDK to the directory holding the android ndk before using this .env file >&2)
die
endif

ifndef ANDROID_API
ANDROID_API := 9
$(shell echo "Autoselecting Android API level $(ANDROID_API). Set ANDROID_API to 3/4/5/6/7/8/9/14 to change." >&2)
endif

ifndef ANDROID_GCCVER
ANDROID_GCCVER := 4.6
$(shell echo "Autoselecting Android $(ANDROID_GCCVER) version of gcc. Set ANDROID_GCCVER to 4.6/4.7 to change." >&2)
endif


# The root directory of your toolchain
TOOLCHAIN_DIR := $(ANDROID_NDK)/toolchains/$(ANDROID_ARCH)-$(ANDROID_GCCVER)/prebuilt/

# This environment can be used on i686_Linux hosts
SUPPORTED_HOSTTYPES  := i686_Linux
# The path to all toolchain commands
i686_Linux_TOOLCHAIN := $(TOOLCHAIN_DIR)linux-x86/bin/i686-linux-android-
x86_64_Linux_TOOLCHAIN := $(TOOLCHAIN_DIR)linux-x86_64/bin/i686-linux-android-
x86_64_Darwin_TOOLCHAIN := $(TOOLCHAIN_DIR)darwin-x86_64/bin/i686-linux-android-

# Lowercase definition of the architecture, as needed by configure, ... 
CONFIGURATION_NAME   := $(ANDROID_ARCH)-linux-androideabi

# The endianness of the target architecture
E_ENDIAN             := LITTLE

# The size of a long on the target architecture
E_SIZEOF_LONG        := 4

# Flags passed to the compiler
#
# In case of debugging, we do not use garbage collection of sections and we do
# not enable code size optimization of code. -g is always passed, even if we
# are not compiling with DEBUG. The debug info is stripped off when installing
# the components. We did not see any notable degradation of code when -g was
# passed along with -Os. 

# We do not have SuS/XSI IPC calls on android
FEATURE_DEFINES := -DNOIPC
# We do not have gethostid
FEATURE_DEFINES += -DNOHOSTID
# We do not have SYS_gettid
FEATURE_DEFINES += -DNO_SYS_GETTID
# We do not have pthread_atfork
FEATURE_DEFINES += -DNO_PTHREAD_ATFORK
# The android linker does not support dynamic data relocs
FEATURE_DEFINES += -DNO_DYNAMIC_DATA_RELOCS

ifneq ($(JNI),)
FEATURE_DEFINES += -DJNI
endif

#Android build system uses all of these flags.
X86_ARCH_OPTIMIZE:=-fpic -mstackrealign -msse3 -m32 -fno-short-enums -mbionic -mtune=atom -march=i686 -ffunction-sections -funwind-tables -fstack-protector -fstrict-aliasing -funswitch-loops -finline-limit=300

X86_ARCH_DEFINES:=-DANDROID



ifeq ($($(COMPONENT)_DEBUG),1)
  E_CFLAGS           := $(FEATURE_DEFINES) -I$(ANDROID_NDK)/platforms/android-$(ANDROID_API)/arch-$(ANDROID_ARCH)/usr/include -g $(X86_ARCH_DEFINES) $(X86_ARCH_OPTIMIZE) -O0
  E_CCFLAGS          := $(E_CFLAGS)
else
  E_CFLAGS           := $(FEATURE_DEFINES) -I$(ANDROID_NDK)/platforms/android-$(ANDROID_API)/arch-$(ANDROID_ARCH)/usr/include -g $(X86_ARCH_DEFINES) $(X86_ARCH_OPTIMIZE) -O2
  E_CCFLAGS          := $(E_CFLAGS)
endif

E_STD_BEGIN_LIB=--sysroot=$(ANDROID_NDK)/platforms/android-$(ANDROID_API)/arch-$(ANDROID_ARCH)
E_STD_BEGIN_PROGRAM=$(E_STD_BEGIN_LIB)

E_STD_LIBS=-Wl,-rpath-link=$(ANDROID_NDK)/platforms/android-$(ANDROID_API)/arch-$(ANDROID_ARCH)/usr/lib -L$(ANDROID_NDK)/platforms/android-$(ANDROID_API)/arch-$(ANDROID_ARCH)/usr/lib -lc -lgcc

# The gdb server used for this environment
GDBSERVER            := $(TOOLCHAIN_DIR)/mips-linux-uclibc/target_utils/gdbserver

# Extra libraries needed for gdbserver in this environment
GDBSERVER_LIBS       := $(TOOLCHAIN_DIR)/lib/libthread_db.so@lib/libthread_db.so:644 s:libthread_db.so@lib/libthread_db.so.1


E_KERNEL_DIR                := $(projectdir)/../vobs/linux/kernel/linux
E_KERNEL_BUILD_EXTRA_PARAMS := CROSS_COMPILE=$($(HOSTTYPE)_TOOLCHAIN)

ifeq ($(JNI),)
bindir=usr/bin
libdir=lib
datadir=share
pkgconfigdir=lib/pkgconfig
incdir=include
sysconfdir=etc
rgcdir=$(libdir)/rgcplugin
viewmapdir=$(bindir)/rgcviews
luamoddir=$(datadir)/lua
lualibdir=$(libdir)/lua
else
libdir=libs/$(JNI_DIR)
bindir=notused
datadir=notused
pkgconfigdir=notused
incdir=notused
sysconfdir=notused
rgcdir=notused
viewmapdir=notused
luamoddir=notused
lualibdir=notused
endif

NO_LIBRARY_VERSIONING=1
