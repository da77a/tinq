/*
 * Copyright (c) 2014 - Qeo LLC
 *
 * The source code form of this Qeo Open Source Project component is subject
 * to the terms of the Clear BSD license.
 *
 * You can redistribute it and/or modify it under the terms of the Clear BSD
 * License (http://directory.fsf.org/wiki/License:ClearBSD). See LICENSE file
 * for more details.
 *
 * The Qeo Open Source Project also includes third party Open Source Software.
 * See LICENSE file for more details.
 */

/* AUTOGENERATED FILE. DO NOT EDIT. */
#ifndef _MOCKPLATFORM_H
#define _MOCKPLATFORM_H

#include "unity.h"
#include "qeo/platform.h"

void Mockplatform_Init(void);
void Mockplatform_Destroy(void);
void Mockplatform_Verify(void);




#define qeo_platform_get_device_storage_path_IgnoreAndReturn(cmock_retval) qeo_platform_get_device_storage_path_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void qeo_platform_get_device_storage_path_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, qeo_util_retcode_t cmock_to_return);
#define qeo_platform_get_device_storage_path_ExpectAndReturn(file_name, full_storage_path, cmock_retval) qeo_platform_get_device_storage_path_CMockExpectAndReturn(__LINE__, file_name, full_storage_path, cmock_retval)
void qeo_platform_get_device_storage_path_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, const char* file_name, char** full_storage_path, qeo_util_retcode_t cmock_to_return);
typedef qeo_util_retcode_t (* CMOCK_qeo_platform_get_device_storage_path_CALLBACK)(const char* file_name, char** full_storage_path, int cmock_num_calls);
void qeo_platform_get_device_storage_path_StubWithCallback(CMOCK_qeo_platform_get_device_storage_path_CALLBACK Callback);
#define qeo_platform_set_key_value_IgnoreAndReturn(cmock_retval) qeo_platform_set_key_value_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void qeo_platform_set_key_value_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, qeo_util_retcode_t cmock_to_return);
#define qeo_platform_set_key_value_ExpectAndReturn(key, value, cmock_retval) qeo_platform_set_key_value_CMockExpectAndReturn(__LINE__, key, value, cmock_retval)
void qeo_platform_set_key_value_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, const char* key, char* value, qeo_util_retcode_t cmock_to_return);
typedef qeo_util_retcode_t (* CMOCK_qeo_platform_set_key_value_CALLBACK)(const char* key, char* value, int cmock_num_calls);
void qeo_platform_set_key_value_StubWithCallback(CMOCK_qeo_platform_set_key_value_CALLBACK Callback);
#define qeo_platform_get_key_value_IgnoreAndReturn(cmock_retval) qeo_platform_get_key_value_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void qeo_platform_get_key_value_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, qeo_util_retcode_t cmock_to_return);
#define qeo_platform_get_key_value_ExpectAndReturn(key, value, cmock_retval) qeo_platform_get_key_value_CMockExpectAndReturn(__LINE__, key, value, cmock_retval)
void qeo_platform_get_key_value_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, const char* key, char** value, qeo_util_retcode_t cmock_to_return);
typedef qeo_util_retcode_t (* CMOCK_qeo_platform_get_key_value_CALLBACK)(const char* key, char** value, int cmock_num_calls);
void qeo_platform_get_key_value_StubWithCallback(CMOCK_qeo_platform_get_key_value_CALLBACK Callback);

#endif
