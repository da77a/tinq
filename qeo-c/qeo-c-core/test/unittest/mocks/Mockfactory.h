/*
 * Copyright (c) 2016 - Qeo LLC
 *
 * The source code form of this Qeo Open Source Project component is subject
 * to the terms of the Clear BSD license.
 *
 * You can redistribute it and/or modify it under the terms of the Clear BSD
 * License (http://directory.fsf.org/wiki/License:ClearBSD). See LICENSE file
 * for more details.
 *
 * The Qeo Open Source Project also includes third party Open Source Software.
 * See LICENSE file for more details.
 */

/* AUTOGENERATED FILE. DO NOT EDIT. */
#ifndef _MOCKFACTORY_H
#define _MOCKFACTORY_H

#include "unity.h"
#include "qeocore/factory.h"

void Mockfactory_Init(void);
void Mockfactory_Destroy(void);
void Mockfactory_Verify(void);




#define qeocore_factory_new_IgnoreAndReturn(cmock_retval) qeocore_factory_new_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void qeocore_factory_new_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, qeo_factory_t* cmock_to_return);
#define qeocore_factory_new_ExpectAndReturn(id, cmock_retval) qeocore_factory_new_CMockExpectAndReturn(__LINE__, id, cmock_retval)
void qeocore_factory_new_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, const qeo_identity_t* id, qeo_factory_t* cmock_to_return);
typedef qeo_factory_t* (* CMOCK_qeocore_factory_new_CALLBACK)(const qeo_identity_t* id, int cmock_num_calls);
void qeocore_factory_new_StubWithCallback(CMOCK_qeocore_factory_new_CALLBACK Callback);
#define qeocore_factory_close_Ignore() qeocore_factory_close_CMockIgnore(__LINE__)
void qeocore_factory_close_CMockIgnore(UNITY_LINE_TYPE cmock_line);
#define qeocore_factory_close_Expect(factory) qeocore_factory_close_CMockExpect(__LINE__, factory)
void qeocore_factory_close_CMockExpect(UNITY_LINE_TYPE cmock_line, qeo_factory_t* factory);
typedef void (* CMOCK_qeocore_factory_close_CALLBACK)(qeo_factory_t* factory, int cmock_num_calls);
void qeocore_factory_close_StubWithCallback(CMOCK_qeocore_factory_close_CALLBACK Callback);
#define qeocore_factory_init_IgnoreAndReturn(cmock_retval) qeocore_factory_init_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void qeocore_factory_init_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, qeo_retcode_t cmock_to_return);
#define qeocore_factory_init_ExpectAndReturn(factory, listener, cmock_retval) qeocore_factory_init_CMockExpectAndReturn(__LINE__, factory, listener, cmock_retval)
void qeocore_factory_init_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, qeo_factory_t* factory, const qeocore_factory_listener_t* listener, qeo_retcode_t cmock_to_return);
typedef qeo_retcode_t (* CMOCK_qeocore_factory_init_CALLBACK)(qeo_factory_t* factory, const qeocore_factory_listener_t* listener, int cmock_num_calls);
void qeocore_factory_init_StubWithCallback(CMOCK_qeocore_factory_init_CALLBACK Callback);
#define qeocore_factory_refresh_policy_IgnoreAndReturn(cmock_retval) qeocore_factory_refresh_policy_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void qeocore_factory_refresh_policy_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, qeo_retcode_t cmock_to_return);
#define qeocore_factory_refresh_policy_ExpectAndReturn(factory, cmock_retval) qeocore_factory_refresh_policy_CMockExpectAndReturn(__LINE__, factory, cmock_retval)
void qeocore_factory_refresh_policy_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, const qeo_factory_t* factory, qeo_retcode_t cmock_to_return);
typedef qeo_retcode_t (* CMOCK_qeocore_factory_refresh_policy_CALLBACK)(const qeo_factory_t* factory, int cmock_num_calls);
void qeocore_factory_refresh_policy_StubWithCallback(CMOCK_qeocore_factory_refresh_policy_CALLBACK Callback);
#define qeocore_factory_set_domainid_IgnoreAndReturn(cmock_retval) qeocore_factory_set_domainid_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void qeocore_factory_set_domainid_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, qeo_retcode_t cmock_to_return);
#define qeocore_factory_set_domainid_ExpectAndReturn(factory, id, cmock_retval) qeocore_factory_set_domainid_CMockExpectAndReturn(__LINE__, factory, id, cmock_retval)
void qeocore_factory_set_domainid_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, qeo_factory_t* factory, qeocore_domain_id_t id, qeo_retcode_t cmock_to_return);
typedef qeo_retcode_t (* CMOCK_qeocore_factory_set_domainid_CALLBACK)(qeo_factory_t* factory, qeocore_domain_id_t id, int cmock_num_calls);
void qeocore_factory_set_domainid_StubWithCallback(CMOCK_qeocore_factory_set_domainid_CALLBACK Callback);
#define qeocore_factory_get_domainid_IgnoreAndReturn(cmock_retval) qeocore_factory_get_domainid_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void qeocore_factory_get_domainid_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, qeo_retcode_t cmock_to_return);
#define qeocore_factory_get_domainid_ExpectAndReturn(factory, id, cmock_retval) qeocore_factory_get_domainid_CMockExpectAndReturn(__LINE__, factory, id, cmock_retval)
void qeocore_factory_get_domainid_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, qeo_factory_t* factory, qeocore_domain_id_t* id, qeo_retcode_t cmock_to_return);
typedef qeo_retcode_t (* CMOCK_qeocore_factory_get_domainid_CALLBACK)(qeo_factory_t* factory, qeocore_domain_id_t* id, int cmock_num_calls);
void qeocore_factory_get_domainid_StubWithCallback(CMOCK_qeocore_factory_get_domainid_CALLBACK Callback);
#define qeocore_factory_get_realm_id_IgnoreAndReturn(cmock_retval) qeocore_factory_get_realm_id_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void qeocore_factory_get_realm_id_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, int64_t cmock_to_return);
#define qeocore_factory_get_realm_id_ExpectAndReturn(factory, cmock_retval) qeocore_factory_get_realm_id_CMockExpectAndReturn(__LINE__, factory, cmock_retval)
void qeocore_factory_get_realm_id_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, qeo_factory_t* factory, int64_t cmock_to_return);
typedef int64_t (* CMOCK_qeocore_factory_get_realm_id_CALLBACK)(qeo_factory_t* factory, int cmock_num_calls);
void qeocore_factory_get_realm_id_StubWithCallback(CMOCK_qeocore_factory_get_realm_id_CALLBACK Callback);
#define qeocore_factory_get_user_id_IgnoreAndReturn(cmock_retval) qeocore_factory_get_user_id_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void qeocore_factory_get_user_id_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, int64_t cmock_to_return);
#define qeocore_factory_get_user_id_ExpectAndReturn(factory, cmock_retval) qeocore_factory_get_user_id_CMockExpectAndReturn(__LINE__, factory, cmock_retval)
void qeocore_factory_get_user_id_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, qeo_factory_t* factory, int64_t cmock_to_return);
typedef int64_t (* CMOCK_qeocore_factory_get_user_id_CALLBACK)(qeo_factory_t* factory, int cmock_num_calls);
void qeocore_factory_get_user_id_StubWithCallback(CMOCK_qeocore_factory_get_user_id_CALLBACK Callback);
#define qeocore_factory_get_realm_url_IgnoreAndReturn(cmock_retval) qeocore_factory_get_realm_url_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void qeocore_factory_get_realm_url_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, char* cmock_to_return);
#define qeocore_factory_get_realm_url_ExpectAndReturn(factory, cmock_retval) qeocore_factory_get_realm_url_CMockExpectAndReturn(__LINE__, factory, cmock_retval)
void qeocore_factory_get_realm_url_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, qeo_factory_t* factory, char* cmock_to_return);
typedef char* (* CMOCK_qeocore_factory_get_realm_url_CALLBACK)(qeo_factory_t* factory, int cmock_num_calls);
void qeocore_factory_get_realm_url_StubWithCallback(CMOCK_qeocore_factory_get_realm_url_CALLBACK Callback);
#define qeocore_factory_set_intf_IgnoreAndReturn(cmock_retval) qeocore_factory_set_intf_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void qeocore_factory_set_intf_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, qeo_retcode_t cmock_to_return);
#define qeocore_factory_set_intf_ExpectAndReturn(factory, interfaces, cmock_retval) qeocore_factory_set_intf_CMockExpectAndReturn(__LINE__, factory, interfaces, cmock_retval)
void qeocore_factory_set_intf_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, qeo_factory_t* factory, const char* interfaces, qeo_retcode_t cmock_to_return);
typedef qeo_retcode_t (* CMOCK_qeocore_factory_set_intf_CALLBACK)(qeo_factory_t* factory, const char* interfaces, int cmock_num_calls);
void qeocore_factory_set_intf_StubWithCallback(CMOCK_qeocore_factory_set_intf_CALLBACK Callback);
#define qeocore_factory_set_bgns_IgnoreAndReturn(cmock_retval) qeocore_factory_set_bgns_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void qeocore_factory_set_bgns_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, qeo_retcode_t cmock_to_return);
#define qeocore_factory_set_bgns_ExpectAndReturn(factory, bgns_server, bgns_port, cmock_retval) qeocore_factory_set_bgns_CMockExpectAndReturn(__LINE__, factory, bgns_server, bgns_port, cmock_retval)
void qeocore_factory_set_bgns_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, qeo_factory_t* factory, const char* bgns_server, const char* bgns_port, qeo_retcode_t cmock_to_return);
typedef qeo_retcode_t (* CMOCK_qeocore_factory_set_bgns_CALLBACK)(qeo_factory_t* factory, const char* bgns_server, const char* bgns_port, int cmock_num_calls);
void qeocore_factory_set_bgns_StubWithCallback(CMOCK_qeocore_factory_set_bgns_CALLBACK Callback);
#define qeocore_factory_set_tcp_server_IgnoreAndReturn(cmock_retval) qeocore_factory_set_tcp_server_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void qeocore_factory_set_tcp_server_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, qeo_retcode_t cmock_to_return);
#define qeocore_factory_set_tcp_server_ExpectAndReturn(factory, tcp_server, cmock_retval) qeocore_factory_set_tcp_server_CMockExpectAndReturn(__LINE__, factory, tcp_server, cmock_retval)
void qeocore_factory_set_tcp_server_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, qeo_factory_t* factory, const char* tcp_server, qeo_retcode_t cmock_to_return);
typedef qeo_retcode_t (* CMOCK_qeocore_factory_set_tcp_server_CALLBACK)(qeo_factory_t* factory, const char* tcp_server, int cmock_num_calls);
void qeocore_factory_set_tcp_server_StubWithCallback(CMOCK_qeocore_factory_set_tcp_server_CALLBACK Callback);
#define qeocore_factory_set_local_tcp_port_IgnoreAndReturn(cmock_retval) qeocore_factory_set_local_tcp_port_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void qeocore_factory_set_local_tcp_port_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, qeo_retcode_t cmock_to_return);
#define qeocore_factory_set_local_tcp_port_ExpectAndReturn(factory, cmock_retval) qeocore_factory_set_local_tcp_port_CMockExpectAndReturn(__LINE__, factory, cmock_retval)
void qeocore_factory_set_local_tcp_port_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, qeo_factory_t* factory, qeo_retcode_t cmock_to_return);
typedef qeo_retcode_t (* CMOCK_qeocore_factory_set_local_tcp_port_CALLBACK)(qeo_factory_t* factory, int cmock_num_calls);
void qeocore_factory_set_local_tcp_port_StubWithCallback(CMOCK_qeocore_factory_set_local_tcp_port_CALLBACK Callback);
#define qeocore_factory_set_user_data_IgnoreAndReturn(cmock_retval) qeocore_factory_set_user_data_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void qeocore_factory_set_user_data_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, qeo_retcode_t cmock_to_return);
#define qeocore_factory_set_user_data_ExpectAndReturn(factory, userdata, cmock_retval) qeocore_factory_set_user_data_CMockExpectAndReturn(__LINE__, factory, userdata, cmock_retval)
void qeocore_factory_set_user_data_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, qeo_factory_t* factory, uintptr_t userdata, qeo_retcode_t cmock_to_return);
typedef qeo_retcode_t (* CMOCK_qeocore_factory_set_user_data_CALLBACK)(qeo_factory_t* factory, uintptr_t userdata, int cmock_num_calls);
void qeocore_factory_set_user_data_StubWithCallback(CMOCK_qeocore_factory_set_user_data_CALLBACK Callback);
#define qeocore_factory_get_user_data_IgnoreAndReturn(cmock_retval) qeocore_factory_get_user_data_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void qeocore_factory_get_user_data_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, qeo_retcode_t cmock_to_return);
#define qeocore_factory_get_user_data_ExpectAndReturn(factory, userdata, cmock_retval) qeocore_factory_get_user_data_CMockExpectAndReturn(__LINE__, factory, userdata, cmock_retval)
void qeocore_factory_get_user_data_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, qeo_factory_t* factory, uintptr_t* userdata, qeo_retcode_t cmock_to_return);
typedef qeo_retcode_t (* CMOCK_qeocore_factory_get_user_data_CALLBACK)(qeo_factory_t* factory, uintptr_t* userdata, int cmock_num_calls);
void qeocore_factory_get_user_data_StubWithCallback(CMOCK_qeocore_factory_get_user_data_CALLBACK Callback);
#define qeocore_fwdfactory_new_IgnoreAndReturn(cmock_retval) qeocore_fwdfactory_new_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void qeocore_fwdfactory_new_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, qeo_factory_t* cmock_to_return);
#define qeocore_fwdfactory_new_ExpectAndReturn(cb, local_port, bgns, cmock_retval) qeocore_fwdfactory_new_CMockExpectAndReturn(__LINE__, cb, local_port, bgns, cmock_retval)
void qeocore_fwdfactory_new_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, qeocore_on_fwdfactory_get_public_locator cb, const char* local_port, bool bgns, qeo_factory_t* cmock_to_return);
typedef qeo_factory_t* (* CMOCK_qeocore_fwdfactory_new_CALLBACK)(qeocore_on_fwdfactory_get_public_locator cb, const char* local_port, bool bgns, int cmock_num_calls);
void qeocore_fwdfactory_new_StubWithCallback(CMOCK_qeocore_fwdfactory_new_CALLBACK Callback);
#define qeocore_fwdfactory_close_Ignore() qeocore_fwdfactory_close_CMockIgnore(__LINE__)
void qeocore_fwdfactory_close_CMockIgnore(UNITY_LINE_TYPE cmock_line);
#define qeocore_fwdfactory_close_Expect(factory) qeocore_fwdfactory_close_CMockExpect(__LINE__, factory)
void qeocore_fwdfactory_close_CMockExpect(UNITY_LINE_TYPE cmock_line, qeo_factory_t* factory);
typedef void (* CMOCK_qeocore_fwdfactory_close_CALLBACK)(qeo_factory_t* factory, int cmock_num_calls);
void qeocore_fwdfactory_close_StubWithCallback(CMOCK_qeocore_fwdfactory_close_CALLBACK Callback);
#define qeocore_fwdfactory_set_public_locator_IgnoreAndReturn(cmock_retval) qeocore_fwdfactory_set_public_locator_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void qeocore_fwdfactory_set_public_locator_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, qeo_retcode_t cmock_to_return);
#define qeocore_fwdfactory_set_public_locator_ExpectAndReturn(factory, ip_address, port, cmock_retval) qeocore_fwdfactory_set_public_locator_CMockExpectAndReturn(__LINE__, factory, ip_address, port, cmock_retval)
void qeocore_fwdfactory_set_public_locator_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, qeo_factory_t* factory, const char* ip_address, int port, qeo_retcode_t cmock_to_return);
typedef qeo_retcode_t (* CMOCK_qeocore_fwdfactory_set_public_locator_CALLBACK)(qeo_factory_t* factory, const char* ip_address, int port, int cmock_num_calls);
void qeocore_fwdfactory_set_public_locator_StubWithCallback(CMOCK_qeocore_fwdfactory_set_public_locator_CALLBACK Callback);
#define qeocore_atexit_Ignore() qeocore_atexit_CMockIgnore(__LINE__)
void qeocore_atexit_CMockIgnore(UNITY_LINE_TYPE cmock_line);
#define qeocore_atexit_Expect(cb) qeocore_atexit_CMockExpect(__LINE__, cb)
void qeocore_atexit_CMockExpect(UNITY_LINE_TYPE cmock_line, const qeocore_exit_cb cb);
typedef void (* CMOCK_qeocore_atexit_CALLBACK)(const qeocore_exit_cb cb, int cmock_num_calls);
void qeocore_atexit_StubWithCallback(CMOCK_qeocore_atexit_CALLBACK Callback);
#define qeocore_get_num_factories_IgnoreAndReturn(cmock_retval) qeocore_get_num_factories_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void qeocore_get_num_factories_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, int cmock_to_return);
#define qeocore_get_num_factories_ExpectAndReturn(cmock_retval) qeocore_get_num_factories_CMockExpectAndReturn(__LINE__, cmock_retval)
void qeocore_get_num_factories_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, int cmock_to_return);
typedef int (* CMOCK_qeocore_get_num_factories_CALLBACK)(int cmock_num_calls);
void qeocore_get_num_factories_StubWithCallback(CMOCK_qeocore_get_num_factories_CALLBACK Callback);

#endif
