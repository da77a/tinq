/*
 * Copyright (c) 2016 - Qeo LLC
 *
 * The source code form of this Qeo Open Source Project component is subject
 * to the terms of the Clear BSD license.
 *
 * You can redistribute it and/or modify it under the terms of the Clear BSD
 * License (http://directory.fsf.org/wiki/License:ClearBSD). See LICENSE file
 * for more details.
 *
 * The Qeo Open Source Project also includes third party Open Source Software.
 * See LICENSE file for more details.
 */

/* AUTOGENERATED FILE. DO NOT EDIT. */
#ifndef _MOCKDYNTYPE_H
#define _MOCKDYNTYPE_H

#include "unity.h"
#include "qeocore/dyntype.h"

void Mockdyntype_Init(void);
void Mockdyntype_Destroy(void);
void Mockdyntype_Verify(void);




#define qeocore_enum_value_to_string_IgnoreAndReturn(cmock_retval) qeocore_enum_value_to_string_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void qeocore_enum_value_to_string_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, qeo_retcode_t cmock_to_return);
#define qeocore_enum_value_to_string_ExpectAndReturn(enum_tsm, enum_type, value, name, sz, cmock_retval) qeocore_enum_value_to_string_CMockExpectAndReturn(__LINE__, enum_tsm, enum_type, value, name, sz, cmock_retval)
void qeocore_enum_value_to_string_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, const DDS_TypeSupport_meta* enum_tsm, const qeocore_type_t* enum_type, qeo_enum_value_t value, char* name, size_t sz, qeo_retcode_t cmock_to_return);
typedef qeo_retcode_t (* CMOCK_qeocore_enum_value_to_string_CALLBACK)(const DDS_TypeSupport_meta* enum_tsm, const qeocore_type_t* enum_type, qeo_enum_value_t value, char* name, size_t sz, int cmock_num_calls);
void qeocore_enum_value_to_string_StubWithCallback(CMOCK_qeocore_enum_value_to_string_CALLBACK Callback);
#define qeocore_enum_string_to_value_IgnoreAndReturn(cmock_retval) qeocore_enum_string_to_value_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void qeocore_enum_string_to_value_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, qeo_retcode_t cmock_to_return);
#define qeocore_enum_string_to_value_ExpectAndReturn(enum_tsm, enum_type, name, value, cmock_retval) qeocore_enum_string_to_value_CMockExpectAndReturn(__LINE__, enum_tsm, enum_type, name, value, cmock_retval)
void qeocore_enum_string_to_value_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, const DDS_TypeSupport_meta* enum_tsm, const qeocore_type_t* enum_type, const char* name, qeo_enum_value_t* value, qeo_retcode_t cmock_to_return);
typedef qeo_retcode_t (* CMOCK_qeocore_enum_string_to_value_CALLBACK)(const DDS_TypeSupport_meta* enum_tsm, const qeocore_type_t* enum_type, const char* name, qeo_enum_value_t* value, int cmock_num_calls);
void qeocore_enum_string_to_value_StubWithCallback(CMOCK_qeocore_enum_string_to_value_CALLBACK Callback);
#define qeocore_type_register_tsm_IgnoreAndReturn(cmock_retval) qeocore_type_register_tsm_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void qeocore_type_register_tsm_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, qeocore_type_t* cmock_to_return);
#define qeocore_type_register_tsm_ExpectAndReturn(factory, tsm, name, cmock_retval) qeocore_type_register_tsm_CMockExpectAndReturn(__LINE__, factory, tsm, name, cmock_retval)
void qeocore_type_register_tsm_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, const qeo_factory_t* factory, const DDS_TypeSupport_meta* tsm, const char* name, qeocore_type_t* cmock_to_return);
typedef qeocore_type_t* (* CMOCK_qeocore_type_register_tsm_CALLBACK)(const qeo_factory_t* factory, const DDS_TypeSupport_meta* tsm, const char* name, int cmock_num_calls);
void qeocore_type_register_tsm_StubWithCallback(CMOCK_qeocore_type_register_tsm_CALLBACK Callback);
#define qeocore_type_register_IgnoreAndReturn(cmock_retval) qeocore_type_register_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void qeocore_type_register_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, qeo_retcode_t cmock_to_return);
#define qeocore_type_register_ExpectAndReturn(factory, type, name, cmock_retval) qeocore_type_register_CMockExpectAndReturn(__LINE__, factory, type, name, cmock_retval)
void qeocore_type_register_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, const qeo_factory_t* factory, qeocore_type_t* type, const char* name, qeo_retcode_t cmock_to_return);
typedef qeo_retcode_t (* CMOCK_qeocore_type_register_CALLBACK)(const qeo_factory_t* factory, qeocore_type_t* type, const char* name, int cmock_num_calls);
void qeocore_type_register_StubWithCallback(CMOCK_qeocore_type_register_CALLBACK Callback);
#define qeocore_type_get_member_id_IgnoreAndReturn(cmock_retval) qeocore_type_get_member_id_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void qeocore_type_get_member_id_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, qeo_retcode_t cmock_to_return);
#define qeocore_type_get_member_id_ExpectAndReturn(type, name, id, cmock_retval) qeocore_type_get_member_id_CMockExpectAndReturn(__LINE__, type, name, id, cmock_retval)
void qeocore_type_get_member_id_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, const qeocore_type_t* type, const char* name, qeocore_member_id_t* id, qeo_retcode_t cmock_to_return);
typedef qeo_retcode_t (* CMOCK_qeocore_type_get_member_id_CALLBACK)(const qeocore_type_t* type, const char* name, qeocore_member_id_t* id, int cmock_num_calls);
void qeocore_type_get_member_id_StubWithCallback(CMOCK_qeocore_type_get_member_id_CALLBACK Callback);
#define qeocore_type_free_Ignore() qeocore_type_free_CMockIgnore(__LINE__)
void qeocore_type_free_CMockIgnore(UNITY_LINE_TYPE cmock_line);
#define qeocore_type_free_Expect(type) qeocore_type_free_CMockExpect(__LINE__, type)
void qeocore_type_free_CMockExpect(UNITY_LINE_TYPE cmock_line, qeocore_type_t* type);
typedef void (* CMOCK_qeocore_type_free_CALLBACK)(qeocore_type_t* type, int cmock_num_calls);
void qeocore_type_free_StubWithCallback(CMOCK_qeocore_type_free_CALLBACK Callback);
#define qeocore_type_string_new_IgnoreAndReturn(cmock_retval) qeocore_type_string_new_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void qeocore_type_string_new_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, qeocore_type_t* cmock_to_return);
#define qeocore_type_string_new_ExpectAndReturn(sz, cmock_retval) qeocore_type_string_new_CMockExpectAndReturn(__LINE__, sz, cmock_retval)
void qeocore_type_string_new_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, size_t sz, qeocore_type_t* cmock_to_return);
typedef qeocore_type_t* (* CMOCK_qeocore_type_string_new_CALLBACK)(size_t sz, int cmock_num_calls);
void qeocore_type_string_new_StubWithCallback(CMOCK_qeocore_type_string_new_CALLBACK Callback);
#define qeocore_type_primitive_new_IgnoreAndReturn(cmock_retval) qeocore_type_primitive_new_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void qeocore_type_primitive_new_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, qeocore_type_t* cmock_to_return);
#define qeocore_type_primitive_new_ExpectAndReturn(tc, cmock_retval) qeocore_type_primitive_new_CMockExpectAndReturn(__LINE__, tc, cmock_retval)
void qeocore_type_primitive_new_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, qeocore_typecode_t tc, qeocore_type_t* cmock_to_return);
typedef qeocore_type_t* (* CMOCK_qeocore_type_primitive_new_CALLBACK)(qeocore_typecode_t tc, int cmock_num_calls);
void qeocore_type_primitive_new_StubWithCallback(CMOCK_qeocore_type_primitive_new_CALLBACK Callback);
#define qeocore_type_sequence_new_IgnoreAndReturn(cmock_retval) qeocore_type_sequence_new_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void qeocore_type_sequence_new_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, qeocore_type_t* cmock_to_return);
#define qeocore_type_sequence_new_ExpectAndReturn(elem_type, cmock_retval) qeocore_type_sequence_new_CMockExpectAndReturn(__LINE__, elem_type, cmock_retval)
void qeocore_type_sequence_new_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, qeocore_type_t* elem_type, qeocore_type_t* cmock_to_return);
typedef qeocore_type_t* (* CMOCK_qeocore_type_sequence_new_CALLBACK)(qeocore_type_t* elem_type, int cmock_num_calls);
void qeocore_type_sequence_new_StubWithCallback(CMOCK_qeocore_type_sequence_new_CALLBACK Callback);
#define qeocore_type_enum_new_IgnoreAndReturn(cmock_retval) qeocore_type_enum_new_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void qeocore_type_enum_new_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, qeocore_type_t* cmock_to_return);
#define qeocore_type_enum_new_ExpectAndReturn(name, values, cmock_retval) qeocore_type_enum_new_CMockExpectAndReturn(__LINE__, name, values, cmock_retval)
void qeocore_type_enum_new_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, const char* name, const qeocore_enum_constants_t* values, qeocore_type_t* cmock_to_return);
typedef qeocore_type_t* (* CMOCK_qeocore_type_enum_new_CALLBACK)(const char* name, const qeocore_enum_constants_t* values, int cmock_num_calls);
void qeocore_type_enum_new_StubWithCallback(CMOCK_qeocore_type_enum_new_CALLBACK Callback);
#define qeocore_type_struct_new_IgnoreAndReturn(cmock_retval) qeocore_type_struct_new_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void qeocore_type_struct_new_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, qeocore_type_t* cmock_to_return);
#define qeocore_type_struct_new_ExpectAndReturn(name, cmock_retval) qeocore_type_struct_new_CMockExpectAndReturn(__LINE__, name, cmock_retval)
void qeocore_type_struct_new_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, const char* name, qeocore_type_t* cmock_to_return);
typedef qeocore_type_t* (* CMOCK_qeocore_type_struct_new_CALLBACK)(const char* name, int cmock_num_calls);
void qeocore_type_struct_new_StubWithCallback(CMOCK_qeocore_type_struct_new_CALLBACK Callback);
#define qeocore_type_struct_add_IgnoreAndReturn(cmock_retval) qeocore_type_struct_add_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void qeocore_type_struct_add_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, qeo_retcode_t cmock_to_return);
#define qeocore_type_struct_add_ExpectAndReturn(container, member, name, id, flags, cmock_retval) qeocore_type_struct_add_CMockExpectAndReturn(__LINE__, container, member, name, id, flags, cmock_retval)
void qeocore_type_struct_add_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, qeocore_type_t* container, qeocore_type_t* member, const char* name, qeocore_member_id_t* id, unsigned int flags, qeo_retcode_t cmock_to_return);
typedef qeo_retcode_t (* CMOCK_qeocore_type_struct_add_CALLBACK)(qeocore_type_t* container, qeocore_type_t* member, const char* name, qeocore_member_id_t* id, unsigned int flags, int cmock_num_calls);
void qeocore_type_struct_add_StubWithCallback(CMOCK_qeocore_type_struct_add_CALLBACK Callback);

#endif
