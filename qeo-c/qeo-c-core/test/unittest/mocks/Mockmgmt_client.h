/*
 * Copyright (c) 2014 - Qeo LLC
 *
 * The source code form of this Qeo Open Source Project component is subject
 * to the terms of the Clear BSD license.
 *
 * You can redistribute it and/or modify it under the terms of the Clear BSD
 * License (http://directory.fsf.org/wiki/License:ClearBSD). See LICENSE file
 * for more details.
 *
 * The Qeo Open Source Project also includes third party Open Source Software.
 * See LICENSE file for more details.
 */

/* AUTOGENERATED FILE. DO NOT EDIT. */
#ifndef _MOCKMGMT_CLIENT_H
#define _MOCKMGMT_CLIENT_H

#include "unity.h"
#include "qeo/mgmt_client.h"

void Mockmgmt_client_Init(void);
void Mockmgmt_client_Destroy(void);
void Mockmgmt_client_Verify(void);




#define qeo_mgmt_client_init_IgnoreAndReturn(cmock_retval) qeo_mgmt_client_init_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void qeo_mgmt_client_init_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, qeo_mgmt_client_ctx_t* cmock_to_return);
#define qeo_mgmt_client_init_ExpectAndReturn(cmock_retval) qeo_mgmt_client_init_CMockExpectAndReturn(__LINE__, cmock_retval)
void qeo_mgmt_client_init_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, qeo_mgmt_client_ctx_t* cmock_to_return);
typedef qeo_mgmt_client_ctx_t* (* CMOCK_qeo_mgmt_client_init_CALLBACK)(int cmock_num_calls);
void qeo_mgmt_client_init_StubWithCallback(CMOCK_qeo_mgmt_client_init_CALLBACK Callback);
#define qeo_mgmt_client_enroll_device_IgnoreAndReturn(cmock_retval) qeo_mgmt_client_enroll_device_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void qeo_mgmt_client_enroll_device_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, qeo_mgmt_client_retcode_t cmock_to_return);
#define qeo_mgmt_client_enroll_device_ExpectAndReturn(ctx, url, pkey, otp, info, cb, cookie, certs, cmock_retval) qeo_mgmt_client_enroll_device_CMockExpectAndReturn(__LINE__, ctx, url, pkey, otp, info, cb, cookie, certs, cmock_retval)
void qeo_mgmt_client_enroll_device_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, qeo_mgmt_client_ctx_t* ctx, const char* url, const EVP_PKEY* pkey, const char* otp, const qeo_platform_device_info* info, qeo_mgmt_client_ssl_ctx_cb cb, void* cookie, STACK_OF(X509)* certs, qeo_mgmt_client_retcode_t cmock_to_return);
typedef qeo_mgmt_client_retcode_t (* CMOCK_qeo_mgmt_client_enroll_device_CALLBACK)(qeo_mgmt_client_ctx_t* ctx, const char* url, const EVP_PKEY* pkey, const char* otp, const qeo_platform_device_info* info, qeo_mgmt_client_ssl_ctx_cb cb, void* cookie, STACK_OF(X509)* certs, int cmock_num_calls);
void qeo_mgmt_client_enroll_device_StubWithCallback(CMOCK_qeo_mgmt_client_enroll_device_CALLBACK Callback);
#define qeo_mgmt_client_get_policy_IgnoreAndReturn(cmock_retval) qeo_mgmt_client_get_policy_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void qeo_mgmt_client_get_policy_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, qeo_mgmt_client_retcode_t cmock_to_return);
#define qeo_mgmt_client_get_policy_ExpectAndReturn(ctx, url, ssl_cb, data_cb, cookie, cmock_retval) qeo_mgmt_client_get_policy_CMockExpectAndReturn(__LINE__, ctx, url, ssl_cb, data_cb, cookie, cmock_retval)
void qeo_mgmt_client_get_policy_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, qeo_mgmt_client_ctx_t* ctx, const char* url, qeo_mgmt_client_ssl_ctx_cb ssl_cb, qeo_mgmt_client_data_cb data_cb, void* cookie, qeo_mgmt_client_retcode_t cmock_to_return);
typedef qeo_mgmt_client_retcode_t (* CMOCK_qeo_mgmt_client_get_policy_CALLBACK)(qeo_mgmt_client_ctx_t* ctx, const char* url, qeo_mgmt_client_ssl_ctx_cb ssl_cb, qeo_mgmt_client_data_cb data_cb, void* cookie, int cmock_num_calls);
void qeo_mgmt_client_get_policy_StubWithCallback(CMOCK_qeo_mgmt_client_get_policy_CALLBACK Callback);
#define qeo_mgmt_client_check_policy_IgnoreAndReturn(cmock_retval) qeo_mgmt_client_check_policy_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void qeo_mgmt_client_check_policy_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, qeo_mgmt_client_retcode_t cmock_to_return);
#define qeo_mgmt_client_check_policy_ExpectAndReturn(ctx, ssl_cb, ssl_cookie, url, sequence_nr, realm_id, result, cmock_retval) qeo_mgmt_client_check_policy_CMockExpectAndReturn(__LINE__, ctx, ssl_cb, ssl_cookie, url, sequence_nr, realm_id, result, cmock_retval)
void qeo_mgmt_client_check_policy_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, qeo_mgmt_client_ctx_t* ctx, qeo_mgmt_client_ssl_ctx_cb ssl_cb, void* ssl_cookie, const char* url, int64_t sequence_nr, int64_t realm_id, bool* result, qeo_mgmt_client_retcode_t cmock_to_return);
typedef qeo_mgmt_client_retcode_t (* CMOCK_qeo_mgmt_client_check_policy_CALLBACK)(qeo_mgmt_client_ctx_t* ctx, qeo_mgmt_client_ssl_ctx_cb ssl_cb, void* ssl_cookie, const char* url, int64_t sequence_nr, int64_t realm_id, bool* result, int cmock_num_calls);
void qeo_mgmt_client_check_policy_StubWithCallback(CMOCK_qeo_mgmt_client_check_policy_CALLBACK Callback);
#define qeo_mgmt_client_clean_Ignore() qeo_mgmt_client_clean_CMockIgnore(__LINE__)
void qeo_mgmt_client_clean_CMockIgnore(UNITY_LINE_TYPE cmock_line);
#define qeo_mgmt_client_clean_Expect(ctx) qeo_mgmt_client_clean_CMockExpect(__LINE__, ctx)
void qeo_mgmt_client_clean_CMockExpect(UNITY_LINE_TYPE cmock_line, qeo_mgmt_client_ctx_t* ctx);
typedef void (* CMOCK_qeo_mgmt_client_clean_CALLBACK)(qeo_mgmt_client_ctx_t* ctx, int cmock_num_calls);
void qeo_mgmt_client_clean_StubWithCallback(CMOCK_qeo_mgmt_client_clean_CALLBACK Callback);

#endif
