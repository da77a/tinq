/*
 * Copyright (c) 2016 - Qeo LLC
 *
 * The source code form of this Qeo Open Source Project component is subject
 * to the terms of the Clear BSD license.
 *
 * You can redistribute it and/or modify it under the terms of the Clear BSD
 * License (http://directory.fsf.org/wiki/License:ClearBSD). See LICENSE file
 * for more details.
 *
 * The Qeo Open Source Project also includes third party Open Source Software.
 * See LICENSE file for more details.
 */

/* AUTOGENERATED FILE. DO NOT EDIT. */
#ifndef _MOCKREMOTE_REGISTRATION_H
#define _MOCKREMOTE_REGISTRATION_H

#include "unity.h"
#include "remote_registration.h"

void Mockremote_registration_Init(void);
void Mockremote_registration_Destroy(void);
void Mockremote_registration_Verify(void);




#define qeo_remote_registration_init_IgnoreAndReturn(cmock_retval) qeo_remote_registration_init_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void qeo_remote_registration_init_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, qeo_retcode_t cmock_to_return);
#define qeo_remote_registration_init_ExpectAndReturn(cfg, cmock_retval) qeo_remote_registration_init_CMockExpectAndReturn(__LINE__, cfg, cmock_retval)
void qeo_remote_registration_init_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, const qeo_remote_registration_init_cfg_t* cfg, qeo_retcode_t cmock_to_return);
typedef qeo_retcode_t (* CMOCK_qeo_remote_registration_init_CALLBACK)(const qeo_remote_registration_init_cfg_t* cfg, int cmock_num_calls);
void qeo_remote_registration_init_StubWithCallback(CMOCK_qeo_remote_registration_init_CALLBACK Callback);
#define qeo_remote_registration_destroy_Ignore() qeo_remote_registration_destroy_CMockIgnore(__LINE__)
void qeo_remote_registration_destroy_CMockIgnore(UNITY_LINE_TYPE cmock_line);
#define qeo_remote_registration_destroy_Expect() qeo_remote_registration_destroy_CMockExpect(__LINE__)
void qeo_remote_registration_destroy_CMockExpect(UNITY_LINE_TYPE cmock_line);
typedef void (* CMOCK_qeo_remote_registration_destroy_CALLBACK)(int cmock_num_calls);
void qeo_remote_registration_destroy_StubWithCallback(CMOCK_qeo_remote_registration_destroy_CALLBACK Callback);
#define qeo_remote_registration_construct_IgnoreAndReturn(cmock_retval) qeo_remote_registration_construct_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void qeo_remote_registration_construct_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, qeo_retcode_t cmock_to_return);
#define qeo_remote_registration_construct_ExpectAndReturn(cfg, remote_reg, cmock_retval) qeo_remote_registration_construct_CMockExpectAndReturn(__LINE__, cfg, remote_reg, cmock_retval)
void qeo_remote_registration_construct_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, const qeo_remote_registration_cfg_t* cfg, qeo_remote_registration_hndl_t* remote_reg, qeo_retcode_t cmock_to_return);
typedef qeo_retcode_t (* CMOCK_qeo_remote_registration_construct_CALLBACK)(const qeo_remote_registration_cfg_t* cfg, qeo_remote_registration_hndl_t* remote_reg, int cmock_num_calls);
void qeo_remote_registration_construct_StubWithCallback(CMOCK_qeo_remote_registration_construct_CALLBACK Callback);
#define qeo_remote_registration_get_user_data_IgnoreAndReturn(cmock_retval) qeo_remote_registration_get_user_data_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void qeo_remote_registration_get_user_data_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, qeo_retcode_t cmock_to_return);
#define qeo_remote_registration_get_user_data_ExpectAndReturn(remote_reg, user_data, cmock_retval) qeo_remote_registration_get_user_data_CMockExpectAndReturn(__LINE__, remote_reg, user_data, cmock_retval)
void qeo_remote_registration_get_user_data_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, qeo_remote_registration_hndl_t remote_reg, uintptr_t* user_data, qeo_retcode_t cmock_to_return);
typedef qeo_retcode_t (* CMOCK_qeo_remote_registration_get_user_data_CALLBACK)(qeo_remote_registration_hndl_t remote_reg, uintptr_t* user_data, int cmock_num_calls);
void qeo_remote_registration_get_user_data_StubWithCallback(CMOCK_qeo_remote_registration_get_user_data_CALLBACK Callback);
#define qeo_remote_registration_destruct_IgnoreAndReturn(cmock_retval) qeo_remote_registration_destruct_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void qeo_remote_registration_destruct_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, qeo_retcode_t cmock_to_return);
#define qeo_remote_registration_destruct_ExpectAndReturn(remote_reg, cmock_retval) qeo_remote_registration_destruct_CMockExpectAndReturn(__LINE__, remote_reg, cmock_retval)
void qeo_remote_registration_destruct_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, qeo_remote_registration_hndl_t* remote_reg, qeo_retcode_t cmock_to_return);
typedef qeo_retcode_t (* CMOCK_qeo_remote_registration_destruct_CALLBACK)(qeo_remote_registration_hndl_t* remote_reg, int cmock_num_calls);
void qeo_remote_registration_destruct_StubWithCallback(CMOCK_qeo_remote_registration_destruct_CALLBACK Callback);
#define qeo_remote_registration_start_IgnoreAndReturn(cmock_retval) qeo_remote_registration_start_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void qeo_remote_registration_start_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, qeo_retcode_t cmock_to_return);
#define qeo_remote_registration_start_ExpectAndReturn(remote_reg, cmock_retval) qeo_remote_registration_start_CMockExpectAndReturn(__LINE__, remote_reg, cmock_retval)
void qeo_remote_registration_start_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, qeo_remote_registration_hndl_t remote_reg, qeo_retcode_t cmock_to_return);
typedef qeo_retcode_t (* CMOCK_qeo_remote_registration_start_CALLBACK)(qeo_remote_registration_hndl_t remote_reg, int cmock_num_calls);
void qeo_remote_registration_start_StubWithCallback(CMOCK_qeo_remote_registration_start_CALLBACK Callback);
#define qeo_remote_registration_update_registration_status_IgnoreAndReturn(cmock_retval) qeo_remote_registration_update_registration_status_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void qeo_remote_registration_update_registration_status_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, qeo_retcode_t cmock_to_return);
#define qeo_remote_registration_update_registration_status_ExpectAndReturn(remote_reg, status, reason, cmock_retval) qeo_remote_registration_update_registration_status_CMockExpectAndReturn(__LINE__, remote_reg, status, reason, cmock_retval)
void qeo_remote_registration_update_registration_status_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, qeo_remote_registration_hndl_t remote_reg, qeo_remote_registration_status_t status, qeo_remote_registration_failure_reason_t reason, qeo_retcode_t cmock_to_return);
typedef qeo_retcode_t (* CMOCK_qeo_remote_registration_update_registration_status_CALLBACK)(qeo_remote_registration_hndl_t remote_reg, qeo_remote_registration_status_t status, qeo_remote_registration_failure_reason_t reason, int cmock_num_calls);
void qeo_remote_registration_update_registration_status_StubWithCallback(CMOCK_qeo_remote_registration_update_registration_status_CALLBACK Callback);
#define qeo_remote_registration_enable_using_new_registration_credentials_IgnoreAndReturn(cmock_retval) qeo_remote_registration_enable_using_new_registration_credentials_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void qeo_remote_registration_enable_using_new_registration_credentials_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, qeo_retcode_t cmock_to_return);
#define qeo_remote_registration_enable_using_new_registration_credentials_ExpectAndReturn(remote_reg, cmock_retval) qeo_remote_registration_enable_using_new_registration_credentials_CMockExpectAndReturn(__LINE__, remote_reg, cmock_retval)
void qeo_remote_registration_enable_using_new_registration_credentials_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, qeo_remote_registration_hndl_t remote_reg, qeo_retcode_t cmock_to_return);
typedef qeo_retcode_t (* CMOCK_qeo_remote_registration_enable_using_new_registration_credentials_CALLBACK)(qeo_remote_registration_hndl_t remote_reg, int cmock_num_calls);
void qeo_remote_registration_enable_using_new_registration_credentials_StubWithCallback(CMOCK_qeo_remote_registration_enable_using_new_registration_credentials_CALLBACK Callback);
#define qeocore_remote_registration_init_cond_Ignore() qeocore_remote_registration_init_cond_CMockIgnore(__LINE__)
void qeocore_remote_registration_init_cond_CMockIgnore(UNITY_LINE_TYPE cmock_line);
#define qeocore_remote_registration_init_cond_Expect() qeocore_remote_registration_init_cond_CMockExpect(__LINE__)
void qeocore_remote_registration_init_cond_CMockExpect(UNITY_LINE_TYPE cmock_line);
typedef void (* CMOCK_qeocore_remote_registration_init_cond_CALLBACK)(int cmock_num_calls);
void qeocore_remote_registration_init_cond_StubWithCallback(CMOCK_qeocore_remote_registration_init_cond_CALLBACK Callback);
#define qeocore_remote_registration_set_key_Ignore() qeocore_remote_registration_set_key_CMockIgnore(__LINE__)
void qeocore_remote_registration_set_key_CMockIgnore(UNITY_LINE_TYPE cmock_line);
#define qeocore_remote_registration_set_key_Expect(key) qeocore_remote_registration_set_key_CMockExpect(__LINE__, key)
void qeocore_remote_registration_set_key_CMockExpect(UNITY_LINE_TYPE cmock_line, EVP_PKEY* key);
typedef void (* CMOCK_qeocore_remote_registration_set_key_CALLBACK)(EVP_PKEY* key, int cmock_num_calls);
void qeocore_remote_registration_set_key_StubWithCallback(CMOCK_qeocore_remote_registration_set_key_CALLBACK Callback);

#endif
