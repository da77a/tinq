/*
 * Copyright (c) 2014 - Qeo LLC
 *
 * The source code form of this Qeo Open Source Project component is subject
 * to the terms of the Clear BSD license.
 *
 * You can redistribute it and/or modify it under the terms of the Clear BSD
 * License (http://directory.fsf.org/wiki/License:ClearBSD). See LICENSE file
 * for more details.
 *
 * The Qeo Open Source Project also includes third party Open Source Software.
 * See LICENSE file for more details.
 */

/* AUTOGENERATED FILE. DO NOT EDIT. */
#ifndef _MOCKCORE_H
#define _MOCKCORE_H

#include "unity.h"
#include "core.h"

void Mockcore_Init(void);
void Mockcore_Destroy(void);
void Mockcore_Verify(void);




#define core_register_type_IgnoreAndReturn(cmock_retval) core_register_type_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void core_register_type_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, qeo_retcode_t cmock_to_return);
#define core_register_type_ExpectAndReturn(factory, dts, ts, name, cmock_retval) core_register_type_CMockExpectAndReturn(__LINE__, factory, dts, ts, name, cmock_retval)
void core_register_type_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, const qeo_factory_t* factory, DDS_DynamicTypeSupport dts, DDS_TypeSupport ts, const char* name, qeo_retcode_t cmock_to_return);
typedef qeo_retcode_t (* CMOCK_core_register_type_CALLBACK)(const qeo_factory_t* factory, DDS_DynamicTypeSupport dts, DDS_TypeSupport ts, const char* name, int cmock_num_calls);
void core_register_type_StubWithCallback(CMOCK_core_register_type_CALLBACK Callback);
#define core_unregister_type_IgnoreAndReturn(cmock_retval) core_unregister_type_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void core_unregister_type_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, qeo_retcode_t cmock_to_return);
#define core_unregister_type_ExpectAndReturn(factory, dts, ts, name, cmock_retval) core_unregister_type_CMockExpectAndReturn(__LINE__, factory, dts, ts, name, cmock_retval)
void core_unregister_type_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, const qeo_factory_t* factory, DDS_DynamicTypeSupport dts, DDS_TypeSupport ts, const char* name, qeo_retcode_t cmock_to_return);
typedef qeo_retcode_t (* CMOCK_core_unregister_type_CALLBACK)(const qeo_factory_t* factory, DDS_DynamicTypeSupport dts, DDS_TypeSupport ts, const char* name, int cmock_num_calls);
void core_unregister_type_StubWithCallback(CMOCK_core_unregister_type_CALLBACK Callback);
#define core_data_clean_Ignore() core_data_clean_CMockIgnore(__LINE__)
void core_data_clean_CMockIgnore(UNITY_LINE_TYPE cmock_line);
#define core_data_clean_Expect(data) core_data_clean_CMockExpect(__LINE__, data)
void core_data_clean_CMockExpect(UNITY_LINE_TYPE cmock_line, qeocore_data_t* data);
typedef void (* CMOCK_core_data_clean_CALLBACK)(qeocore_data_t* data, int cmock_num_calls);
void core_data_clean_StubWithCallback(CMOCK_core_data_clean_CALLBACK Callback);
#define core_data_init_IgnoreAndReturn(cmock_retval) core_data_init_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void core_data_init_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, qeo_retcode_t cmock_to_return);
#define core_data_init_ExpectAndReturn(data, reader, writer, cmock_retval) core_data_init_CMockExpectAndReturn(__LINE__, data, reader, writer, cmock_retval)
void core_data_init_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, qeocore_data_t* data, const qeocore_reader_t* reader, const qeocore_writer_t* writer, qeo_retcode_t cmock_to_return);
typedef qeo_retcode_t (* CMOCK_core_data_init_CALLBACK)(qeocore_data_t* data, const qeocore_reader_t* reader, const qeocore_writer_t* writer, int cmock_num_calls);
void core_data_init_StubWithCallback(CMOCK_core_data_init_CALLBACK Callback);
#define core_data_alloc_IgnoreAndReturn(cmock_retval) core_data_alloc_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void core_data_alloc_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, qeocore_data_t* cmock_to_return);
#define core_data_alloc_ExpectAndReturn(reader, writer, cmock_retval) core_data_alloc_CMockExpectAndReturn(__LINE__, reader, writer, cmock_retval)
void core_data_alloc_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, const qeocore_reader_t* reader, const qeocore_writer_t* writer, qeocore_data_t* cmock_to_return);
typedef qeocore_data_t* (* CMOCK_core_data_alloc_CALLBACK)(const qeocore_reader_t* reader, const qeocore_writer_t* writer, int cmock_num_calls);
void core_data_alloc_StubWithCallback(CMOCK_core_data_alloc_CALLBACK Callback);
#define core_create_reader_IgnoreAndReturn(cmock_retval) core_create_reader_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void core_create_reader_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, qeocore_reader_t* cmock_to_return);
#define core_create_reader_ExpectAndReturn(factory, type, topic_name, flags, listener, prc, cmock_retval) core_create_reader_CMockExpectAndReturn(__LINE__, factory, type, topic_name, flags, listener, prc, cmock_retval)
void core_create_reader_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, const qeo_factory_t* factory, qeocore_type_t* type, const char* topic_name, int flags, const qeocore_reader_listener_t* listener, qeo_retcode_t* prc, qeocore_reader_t* cmock_to_return);
typedef qeocore_reader_t* (* CMOCK_core_create_reader_CALLBACK)(const qeo_factory_t* factory, qeocore_type_t* type, const char* topic_name, int flags, const qeocore_reader_listener_t* listener, qeo_retcode_t* prc, int cmock_num_calls);
void core_create_reader_StubWithCallback(CMOCK_core_create_reader_CALLBACK Callback);
#define core_enable_reader_IgnoreAndReturn(cmock_retval) core_enable_reader_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void core_enable_reader_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, qeo_retcode_t cmock_to_return);
#define core_enable_reader_ExpectAndReturn(reader, cmock_retval) core_enable_reader_CMockExpectAndReturn(__LINE__, reader, cmock_retval)
void core_enable_reader_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, qeocore_reader_t* reader, qeo_retcode_t cmock_to_return);
typedef qeo_retcode_t (* CMOCK_core_enable_reader_CALLBACK)(qeocore_reader_t* reader, int cmock_num_calls);
void core_enable_reader_StubWithCallback(CMOCK_core_enable_reader_CALLBACK Callback);
#define core_delete_reader_Ignore() core_delete_reader_CMockIgnore(__LINE__)
void core_delete_reader_CMockIgnore(UNITY_LINE_TYPE cmock_line);
#define core_delete_reader_Expect(reader, lock) core_delete_reader_CMockExpect(__LINE__, reader, lock)
void core_delete_reader_CMockExpect(UNITY_LINE_TYPE cmock_line, qeocore_reader_t* reader, bool lock);
typedef void (* CMOCK_core_delete_reader_CALLBACK)(qeocore_reader_t* reader, bool lock, int cmock_num_calls);
void core_delete_reader_StubWithCallback(CMOCK_core_delete_reader_CALLBACK Callback);
#define core_read_or_take_IgnoreAndReturn(cmock_retval) core_read_or_take_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void core_read_or_take_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, qeo_retcode_t cmock_to_return);
#define core_read_or_take_ExpectAndReturn(reader, filter, data, take, cmock_retval) core_read_or_take_CMockExpectAndReturn(__LINE__, reader, filter, data, take, cmock_retval)
void core_read_or_take_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, const qeocore_reader_t* reader, const qeocore_filter_t* filter, qeocore_data_t* data, int take, qeo_retcode_t cmock_to_return);
typedef qeo_retcode_t (* CMOCK_core_read_or_take_CALLBACK)(const qeocore_reader_t* reader, const qeocore_filter_t* filter, qeocore_data_t* data, int take, int cmock_num_calls);
void core_read_or_take_StubWithCallback(CMOCK_core_read_or_take_CALLBACK Callback);
#define core_create_writer_IgnoreAndReturn(cmock_retval) core_create_writer_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void core_create_writer_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, qeocore_writer_t* cmock_to_return);
#define core_create_writer_ExpectAndReturn(factory, type, topic_name, flags, listener, prc, cmock_retval) core_create_writer_CMockExpectAndReturn(__LINE__, factory, type, topic_name, flags, listener, prc, cmock_retval)
void core_create_writer_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, const qeo_factory_t* factory, qeocore_type_t* type, const char* topic_name, int flags, const qeocore_writer_listener_t* listener, qeo_retcode_t* prc, qeocore_writer_t* cmock_to_return);
typedef qeocore_writer_t* (* CMOCK_core_create_writer_CALLBACK)(const qeo_factory_t* factory, qeocore_type_t* type, const char* topic_name, int flags, const qeocore_writer_listener_t* listener, qeo_retcode_t* prc, int cmock_num_calls);
void core_create_writer_StubWithCallback(CMOCK_core_create_writer_CALLBACK Callback);
#define core_enable_writer_IgnoreAndReturn(cmock_retval) core_enable_writer_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void core_enable_writer_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, qeo_retcode_t cmock_to_return);
#define core_enable_writer_ExpectAndReturn(writer, cmock_retval) core_enable_writer_CMockExpectAndReturn(__LINE__, writer, cmock_retval)
void core_enable_writer_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, qeocore_writer_t* writer, qeo_retcode_t cmock_to_return);
typedef qeo_retcode_t (* CMOCK_core_enable_writer_CALLBACK)(qeocore_writer_t* writer, int cmock_num_calls);
void core_enable_writer_StubWithCallback(CMOCK_core_enable_writer_CALLBACK Callback);
#define core_delete_writer_Ignore() core_delete_writer_CMockIgnore(__LINE__)
void core_delete_writer_CMockIgnore(UNITY_LINE_TYPE cmock_line);
#define core_delete_writer_Expect(writer, lock) core_delete_writer_CMockExpect(__LINE__, writer, lock)
void core_delete_writer_CMockExpect(UNITY_LINE_TYPE cmock_line, qeocore_writer_t* writer, bool lock);
typedef void (* CMOCK_core_delete_writer_CALLBACK)(qeocore_writer_t* writer, bool lock, int cmock_num_calls);
void core_delete_writer_StubWithCallback(CMOCK_core_delete_writer_CALLBACK Callback);
#define core_write_IgnoreAndReturn(cmock_retval) core_write_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void core_write_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, qeo_retcode_t cmock_to_return);
#define core_write_ExpectAndReturn(writer, data, sample, cmock_retval) core_write_CMockExpectAndReturn(__LINE__, writer, data, sample, cmock_retval)
void core_write_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, const qeocore_writer_t* writer, const qeocore_data_t* data, const void* sample, qeo_retcode_t cmock_to_return);
typedef qeo_retcode_t (* CMOCK_core_write_CALLBACK)(const qeocore_writer_t* writer, const qeocore_data_t* data, const void* sample, int cmock_num_calls);
void core_write_StubWithCallback(CMOCK_core_write_CALLBACK Callback);
#define core_remove_IgnoreAndReturn(cmock_retval) core_remove_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void core_remove_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, qeo_retcode_t cmock_to_return);
#define core_remove_ExpectAndReturn(writer, data, sample, cmock_retval) core_remove_CMockExpectAndReturn(__LINE__, writer, data, sample, cmock_retval)
void core_remove_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, const qeocore_writer_t* writer, const qeocore_data_t* data, const void* sample, qeo_retcode_t cmock_to_return);
typedef qeo_retcode_t (* CMOCK_core_remove_CALLBACK)(const qeocore_writer_t* writer, const qeocore_data_t* data, const void* sample, int cmock_num_calls);
void core_remove_StubWithCallback(CMOCK_core_remove_CALLBACK Callback);
#define core_get_open_domain_factory_IgnoreAndReturn(cmock_retval) core_get_open_domain_factory_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void core_get_open_domain_factory_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, qeo_factory_t* cmock_to_return);
#define core_get_open_domain_factory_ExpectAndReturn(cmock_retval) core_get_open_domain_factory_CMockExpectAndReturn(__LINE__, cmock_retval)
void core_get_open_domain_factory_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, qeo_factory_t* cmock_to_return);
typedef qeo_factory_t* (* CMOCK_core_get_open_domain_factory_CALLBACK)(int cmock_num_calls);
void core_get_open_domain_factory_StubWithCallback(CMOCK_core_get_open_domain_factory_CALLBACK Callback);
#define core_factory_set_tcp_server_no_lock_IgnoreAndReturn(cmock_retval) core_factory_set_tcp_server_no_lock_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void core_factory_set_tcp_server_no_lock_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, qeo_retcode_t cmock_to_return);
#define core_factory_set_tcp_server_no_lock_ExpectAndReturn(factory, tcp_server, cmock_retval) core_factory_set_tcp_server_no_lock_CMockExpectAndReturn(__LINE__, factory, tcp_server, cmock_retval)
void core_factory_set_tcp_server_no_lock_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, qeo_factory_t* factory, const char* tcp_server, qeo_retcode_t cmock_to_return);
typedef qeo_retcode_t (* CMOCK_core_factory_set_tcp_server_no_lock_CALLBACK)(qeo_factory_t* factory, const char* tcp_server, int cmock_num_calls);
void core_factory_set_tcp_server_no_lock_StubWithCallback(CMOCK_core_factory_set_tcp_server_no_lock_CALLBACK Callback);

#endif
