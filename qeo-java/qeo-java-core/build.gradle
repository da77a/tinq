
//ext.findbugsHtml = true //enable this to genereate findbugs html instead of xml for local development. don't push this!

apply plugin: 'java'
apply plugin: 'eclipse'
apply from: (System.properties['qeoGradleHelper'] ?: '') + '/findbugs.gradle'
apply from: (System.properties['qeoGradleHelper'] ?: '') + '/codegen.gradle'
apply from: (System.properties['qeoGradleHelper'] ?: '') + '/checkstyle.gradle'

//Set JDK source/target to version 6
sourceCompatibility=1.6
targetCompatibility=1.6

eclipse {
    jdt {
        //set JDK source/target in eclipse to version 6
        sourceCompatibility = 1.6
        targetCompatibility = 1.6
    }
    classpath {
        //Set eclipse properties to use JDK 6 JVM for compilation
        containers.clear()
        containers.add('org.eclipse.jdt.launching.JRE_CONTAINER/org.eclipse.jdt.internal.debug.ui.launcher.StandardVMType/JavaSE-1.6')
    }
}

File generatedDir = file("src/generated/java")

generateTypes {
    qdms = [
        "catalog/qeo_DeviceInfo.xml",
        "catalog/qeo_types.xml"
    ]
    language = "java"
    outputDir = generatedDir.absolutePath
}

clean.doLast {
    delete(generatedDir)
}

task javadocPub(type: Javadoc, dependsOn: classes) {
    source = sourceSets.main.allJava
    destinationDir = new File(project.docsDir, 'javadocPub')
    exclude 'org/qeo/internal/**'
    classpath += files(sourceSets.main.output.classesDir)
}

// javaDoc
task jarJavaDoc(type: Jar, dependsOn:javadocPub) {
    classifier = 'javadoc'
    from javadocPub.destinationDir
}

// javaSources
task jarJavaSources(type: Jar) {
    classifier = 'sources'
    from sourceSets.main.allSource
}

artifacts {
    archives jarJavaDoc
    archives jarJavaSources
}

dependencies {
    generated "org.qeo:qeo-qdm:${project.qeoVersion}@zip"
}

