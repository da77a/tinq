import java.util.concurrent.Semaphore;

/*
 Hack alert !!!
 We are redefining the buildDir from gradle to output.
 As "./build/" is already used for the middleware build system.
 So we decided to use the output directory of that system.
 Keep this line on top of the others!
 */
project.buildDir = "output/gradle"
// ext.findbugsHtml = true //enable this to genereate findbugs html instead of xml for local development. don't push this!

//apply from: rootProject.file('../gradle-helper/emma.gradle')
apply plugin: 'java'
apply from: rootProject.file('../gradle-helper/checkstyle.gradle')
apply plugin: 'eclipse'
apply from: rootProject.file('../gradle-helper/codegen.gradle')
apply from: rootProject.file('../gradle-helper/findbugs.gradle')
apply from: rootProject.file('../gradle-helper/androidNdk.gradle')
apply from: rootProject.file('../gradle-helper/artifactoryVersion.gradle')

configurations {
    nativeAndroidDebug
    nativeAndroidRelease
    nativeHost
}


eclipse {
    jdt {
        //set JDK source/target in eclipse to version 6
        sourceCompatibility = 1.6
        targetCompatibility = 1.6
    }
    classpath {
        //Set eclipse properties to use JDK 6 JVM for compilation
        containers.clear()
        containers.add('org.eclipse.jdt.launching.JRE_CONTAINER/org.eclipse.jdt.internal.debug.ui.launcher.StandardVMType/JavaSE-1.6')

        //Set native library for tests
        file.withXml {
            provider -> provider.asNode().findAll { it.@path.contains("src/test/java") }.each {
                it.appendNode('attributes').appendNode('attribute', [name: 'org.eclipse.jdt.launching.CLASSPATH_ATTR_LIBRARY_PATH_ENTRY', value:'qeo-java/output/gradle/binary-host/debug/amd64/Linux'])
            }
        }
    }
}

File generatedDirTest = file("src/generated-test/java")

generateTestTypes {
    qdms = [
        "catalog/qeo_RegistrationCredentials.xml",
        "catalog/qeo_RegistrationRequest.xml",
        "apps/wifidoctor/wifidoctor.xml",
        "apps/wifidoctor/wifi.xml"
    ]
    language = "java"
    outputDir = generatedDirTest.absolutePath
}

clean.doLast {
    delete(generatedDirTest)
}


////define sourceSet for accessControllerTest
//sourceSets {
//    accessControllerTest {
//        java {
//            srcDir 'src/accesscontrollertest/java'
//        }
//        compileClasspath += configurations.compile
//        compileClasspath += files(sourceSets.main.output.classesDir)
//    }
//}
//
//
//
//jar {
//    exclude "**/accesscontrollertest/**"
//}
//
//task accessControlTest(type: JavaExec) {
//    dependsOn 'accessControllerTestClasses', 'generateBinariesHost'
//    main = "org.qeo.accesscontrollertests.AccessControlTest"
//
//    //add classpaths
//    classpath sourceSets.accessControllerTest.runtimeClasspath
//    classpath configurations.compile
//    classpath files(sourceSets.main.output.classesDir)
//
//    def osArch = System.getProperty("os.arch")
//    def osName = System.getProperty("os.name")
//    systemProperty "java.security.manager", "default" //enable security manager
//    systemProperty "java.security.policy", "src/accesscontrollertest/qeo-java.policy" //specify policy file
//    systemProperty "qeo-java-path", sourceSets.main.output.classesDir //set path to qeo-java in systemproperty. This will be used in the policy file.
//    doFirst {
//        for (i in configurations.compile) {
//            if (i.toString().matches(".*libs/qeo-java-core-.*")) {
//                systemProperty "qeo-java-core-jar", i.toString() //set path to qeo-java-core in systemproperty. This will be used in the policy file.
//            }
//        }
//    }
//    systemProperty "java.library.path", "${buildDir}/binary-host/debug/${osArch}/${osName}" //load native library
//}
//accessControllerTestClasses.dependsOn(classes)
//check.dependsOn(accessControlTest)
////make sure to run regular unit test before accessControllerTest. Output from regular tests is more convenient in case of problems
//accessControlTest.mustRunAfter(test)
//
//checkstyleAccessControllerTest {
//    configFile = project.file ("$buildDir/checkstyle_test.xml")
//}
//tasks.checkstyleAccessControllerTest.dependsOn('downloadCheckstyleTestConfig')

task javah {
    dependsOn classes

    // Generate the headers from the main sourceSet
    ext.sourceSet = sourceSets.main
    ext.sourceFiles = sourceSet.java.matching{
        include 'org/qeo/jni/**.java'
        exclude '**/package-info.java'
    }
    // Generate them
    ext.destDir = new File(buildDir, 'javah')

    inputs.files sourceFiles
    outputs.dir destDir

    String cmdDir = "";
    if (System.env.JAVA_HOME) {
        cmdDir = System.env.JAVA_HOME + "/bin/"
    }

    doFirst {
        ext.destDir.mkdir()
        // Calculate the classpath
        FileCollection classpath = sourceSet.compileClasspath + project.files(sourceSet.output.classesDir)
        // Generate the class definitions
        def classes = []
        sourceFiles.visit {
            if (it.relativePath.isFile()) {
                classes.add(it.path.replaceAll(/\.java$/,'').replaceAll('/','.'))
            }
        }

        //hack to make qeo-c output dir point to qeo-java dir
        project.exec {
            commandLine("mkdir", "-p", "../../qeo-c/output/gradle")
        }
        project.exec {
            commandLine("ln", "-s", "../../../qeo-java/qeo-java/output/gradle/javah", "../../qeo-c/output/gradle/javah")
        }

        project.exec {
            commandLine("${cmdDir}javah", '-jni', '-classpath', classpath.asPath, '-d', destDir, *classes)
        }
    }
}

task generateLdver {
    dependsOn javah
    
    def ldverFile = file('api/symbols/libqeoJNI.ldver')
    def ldverFileExtra = file('api/symbols/libqeoJNIExtra.ldver')
    inputs.dir files("${buildDir}/javah")
    inputs.file ldverFileExtra
    outputs.file ldverFile

    def exportedSymbols = new ByteArrayOutputStream()

    doFirst {
        project.exec {
            executable "$System.env.SHELL"
            args '-c', 'cat ' + buildDir + '/javah/*.h | grep JNIEXPORT | sed \'s/(.*//;s/.* //;s/^/\t/;s/$/;/\' | sort'

            standardOutput = exportedSymbols
        }
    }
    doLast {
        ldverFile.text  = "qeo_jni_0.1 {\nglobal:\n"
        ldverFile.text += "/*THIS IS A GENERATED FILE BY GRADLE, DO NOT EDIT*/\n";
        ldverFile.text += "\tJNI_OnLoad;\n"
        ldverFile.text += exportedSymbols.toString();
        ldverFile.text += ldverFileExtra.text
        ldverFile.text += "local:\n\t*;\n};\n"
    }
}

def runMake(Object[] args) {
    def makeCmd = ["make", "-f", "Makefile_component", "PROJECT_VERSION=" + project.displayVersion, "JNI=1"]
    if (project.hasProperty("makeExtras")) {
        makeCmd.addAll(project.makeExtras.tokenize(' '))
    }
    makeCmd.addAll(*args)
    println "Make command = " + makeCmd
    exec {
        commandLine = makeCmd
    }
}

//define all directories that are used in c compilations here
//failing to add them here will result in incorrect incremental compilations
def cInputDirs = files(
    "src/main/c",
    "${buildDir}/javah",
    "api/symbols/libqeoJNI.ldver",
    "../../qeo-c/qeo-c-core/src",
    "../../qeo-c/qeo-c-core/api",
    "../../qeo-c/qeo-c-core/Makefile_component",
    "../../qeo-c/qeo-c-util/src",
    "../../qeo-c/qeo-c-util/api",
    "../../qeo-c/qeo-c-util/Makefile_component",
    "../../qeo-c/qeo-openssl-engine-pkcs12/src",
    "../../qeo-c/qeo-openssl-engine-pkcs12/api",
    "../../qeo-c/qeo-openssl-engine-pkcs12/Makefile_component",
    "../../qeo-c/qeo-management-client/src",
    "../../qeo-c/qeo-management-client/api",
    "../../qeo-c/qeo-management-client/Makefile_component",
    "../../dds/src",
    "../../dds/api",
    "../../dds/plugins",
    "../../dds/Makefile_component",
)

def getOutputDirs(def target) {
    def nativeComponents = ["dds", "qeo-c-core", "qeo-c-util", "qeo-openssl-engine-pkcs12", "qeo-management-client", "qeo-java"]
    def list = []
    for (def comp : nativeComponents) {
        list += "output/${comp}/${target}"
    }
    return list
}

def buildDirHost = file("${buildDir}/binary-host/")
// This task generates the binaries for Host (both debug and release).
task generateBinariesHost {
    description "Generate native binaries for HOSTLINUX"
    dependsOn javah, generateLdver
    def osArch = System.getProperty("os.arch")
    def osName = System.getProperty("os.name")
    osName = osName.replaceAll(" ", "")
    def args = ["recursive_install", "libdir=${osArch}/${osName}"]
    inputs.dir cInputDirs
    outputs.dir "${buildDirHost}"
    outputs.dir getOutputDirs("HOSTLINUX")

    doFirst {
        cInputDirs.each {
            assert it.exists()
        }
    }

    doLast {
        Semaphore sem = new Semaphore(0);
        Exception ex = null;
        Runnable rDebug = new Runnable() {
            public void run() {
                // debug
                try {
                    runMake("dds_LOG_FILE=1", "DEBUG=1", "INSTALL_DIR=${buildDirHost}/debug", *args)
                } catch (Exception e) {
                    ex = e;
                }
                sem.release();
            }
        }
        Runnable rRelease = new Runnable() {
            public void run() {
                // release
                try {
                    runMake("INSTALL_DIR=${buildDirHost}/release", "DEBUG_INSTALL_DIR=${buildDirHost}/release-symbols", *args)
                } catch (Exception e) {
                    ex = e;
                }
                sem.release();
            }
        }
        if (System.properties['qeo.parallelBuild.enabled'] == null || System.properties['qeo.parallelBuild.enabled'] == "true") {
            //parallel build enabled (default)
            logger.info("Building in parallel (use -Dqeo.parallelBuild.enabled=false to disable)")
            new Thread(rDebug).start();
            Thread.sleep(2000); //make can give a conflict during startup, so delay the next process a bit
            new Thread(rRelease).start();
            sem.acquire(2);
            if (ex != null) {    
                throw ex
            }
        }
        else {
            //parallel build disabled
            rDebug.run();
            if (ex != null) {    
                throw ex
            }
            rRelease.run();
            if (ex != null) {    
                throw ex
            }
        }
    }
}


def buildDirAndroid = file("${buildDir}/binary-android/")
// This task generates the binaries for Android (release only).
task generateBinariesAndroidRelease {
    dependsOn javah, generateLdver
    def args = ["ANDROID_NDK=${androidNdkLocation}", "ANDROID_GCCVER=${androidGccVersion}", "ANDROID_API=${androidNdkApi}", "recursive_install"]
    inputs.dir cInputDirs
    outputs.dir "${buildDirAndroid}/release"
    outputs.dir getOutputDirs("GOOG_ARMANDROID")
    outputs.dir getOutputDirs("GOOG_X86ANDROID")
    doLast() {
        Semaphore sem = new Semaphore(0);
        Runnable rArm = new Runnable() {
            public void run() {
                //Android ARMv6
                //adding DEBUG_INSTALL_DIR will strip the binaries in the INTALL_DIR an puts the symbols into the DEBUG_INSTALL_DIR
                runMake("libdir=android", "E=GOOG_ARMANDROID", "INSTALL_DIR=${buildDirAndroid}/release/arm", "DEBUG_INSTALL_DIR=${buildDirAndroid}/release-symbols/arm", *args)
                sem.release();
            }
        }
        Runnable rX86 = new Runnable() {
            public void run() {
                //Android x86
                runMake("libdir=android", "E=GOOG_X86ANDROID", "INSTALL_DIR=${buildDirAndroid}/release/x86", "DEBUG_INSTALL_DIR=${buildDirAndroid}/release-symbols/x86", *args)
                sem.release();
            }
        }
        if (System.properties['qeo.parallelBuild.enabled'] == null || System.properties['qeo.parallelBuild.enabled'] == "true") {
            //parallel build enabled (default)
            logger.info("Building in parallel (use -Dqeo.parallelBuild.enabled=false to disable)")
            new Thread(rArm).start();
            Thread.sleep(2000); //make can give a conflict during startup, so delay the 2nd process a bit
            new Thread(rX86).start();
            sem.acquire(2);
        }
        else {
            //parallel build disabled
            rArm.run();
            rX86.run();
        }
    }
}

// This task generates the binaries for Android (debug only).
task generateBinariesAndroidDebug {
    dependsOn javah, generateLdver
    def args = ["dds_LOG_FILE=1", "DEBUG=1", "ANDROID_NDK=${androidNdkLocation}", "ANDROID_GCCVER=${androidGccVersion}", "ANDROID_API=${androidNdkApi}", "recursive_install"]
    inputs.dir cInputDirs
    outputs.dir "${buildDirAndroid}/debug"
    outputs.dir getOutputDirs("GOOG_ARMANDROID")
    outputs.dir getOutputDirs("GOOG_X86ANDROID")
    doFirst {
        cInputDirs.each {
            assert it.exists()
        }
    }
    doLast() {
        Semaphore sem = new Semaphore(0);
        Exception ex = null;
        Runnable rArm = new Runnable() {
            public void run() {
                //Android ARMv6 - debug
                try {
                    runMake("libdir=android", "E=GOOG_ARMANDROID", "INSTALL_DIR=${buildDirAndroid}/debug/arm", *args)
                } catch (Exception e) {
                    ex = e;
                }
                sem.release();
            }
        }
        Runnable rX86 = new Runnable() {
            public void run() {
                //Android x86 - debug
                try {
                    runMake("libdir=android", "E=GOOG_X86ANDROID", "INSTALL_DIR=${buildDirAndroid}/debug/x86", *args)
                } catch (Exception e) {
                    ex = e;
                }
                sem.release();
            }
        }
        //add gdb.setup files to be able to use gdb later on
        File gdbSetupArmDir = new File(buildDirAndroid, "debug/arm/android")
        mkdir gdbSetupArmDir
        File gdbSetupArm = new File(gdbSetupArmDir, "gdb.setup")
        gdbSetupArm.text = "directory ${androidNdkLocation}/platforms/android-${androidNdkApi}/arch-arm/usr/include ${androidNdkLocation}/sources/cxx-stl/system/include\n"
        File gdbSetupX86Dir = new File(buildDirAndroid, "debug/x86/android")
        mkdir gdbSetupX86Dir
        File gdbSetupX86 = new File(gdbSetupX86Dir, "gdb.setup")
        gdbSetupX86.text = "directory ${androidNdkLocation}/platforms/android-${androidNdkApi}/arch-x86/usr/include ${androidNdkLocation}/sources/cxx-stl/system/include\n"
        if (System.properties['qeo.parallelBuild.enabled'] == null || System.properties['qeo.parallelBuild.enabled'] == "true") {
            //parallel build enabled (default)
            logger.info("Building in parallel (use -Dqeo.parallelBuild.enabled=false to disable)")
            new Thread(rArm).start();
            Thread.sleep(2000); //make can give a conflict during startup, so delay the 2nd process a bit
            new Thread(rX86).start();
            sem.acquire(2);
            if (ex != null) {    
                throw ex
            }
        }
        else {
            //parallel build disabled
            rArm.run();
            if (ex != null) {    
                throw ex
            }
            rX86.run();
            if (ex != null) {    
                throw ex
            }
        }
    }
}

// Define the native jar.
// This is the jar with the binary shared objects (both debug and release)
task jarNativeHost(type: Jar) {
    dependsOn generateBinariesHost
    description "Generate jar files containing native binaries for host"
    def osArch = System.getProperty("os.arch")
    def osName = System.getProperty("os.name")
    osName = osName.replaceAll(" ", "")
    from (fileTree("${buildDirHost}/release/")) {
        include "${osArch}/${osName}/**/*JNI.so*"
        into 'native'
        rename '(\\.\\d+)*$', ''
    }
    from (fileTree("${buildDirHost}/debug/${osArch}/${osName}")) {
        include "*JNI.so*"
        into "native/${osArch}/${osName}/debug"
    }
    classifier 'native-host'
}

//this is the jar with native files for Android (release only)
task jarNativeAndroidRelease(type: Jar) {
    dependsOn generateBinariesAndroidRelease
    from (fileTree("${buildDirAndroid}/release/arm/android")) {
        include '*JNI.so*'
        into 'lib/armeabi'
    }
    from (fileTree("${buildDirAndroid}/release/x86/android")) {
        include '*JNI.so*'
        into 'lib/x86'
    }
    classifier 'native-android'
}

task jarNativeAndroidReleaseSymbols(type: Jar) {
    dependsOn generateBinariesAndroidRelease
    from (fileTree("${buildDirAndroid}/release-symbols/arm/android/")) {
        include '*JNI.so*'
        into 'lib/armeabi'
    }
    from (fileTree("${buildDirAndroid}/release-symbols/x86/android/")) {
        include '*JNI.so*'
        into 'lib/x86'
    }
    classifier 'native-android-symbols'
}

//this is the jar with native files for Android (debug only)
task jarNativeAndroidDebug(type: Jar) {
    dependsOn generateBinariesAndroidDebug
    from (fileTree("${buildDirAndroid}/debug/arm/android")) {
        include '*JNI.so*'
        into 'lib/armeabi'
    }
    from (fileTree("${buildDirAndroid}/debug/x86/android/")) {
        include '*JNI.so*'
        into 'lib/x86'
    }

    classifier 'native-android-debug'
}

//this is the jar with native files for Android (debug only)
task jarNativeAndroidGdb(type: Jar) {
    dependsOn generateBinariesAndroidDebug
    from (fileTree("${buildDirAndroid}/debug/arm/android")) {
        include 'gdb.setup'
        into 'lib/armeabi'
    }
    from (fileTree("${buildDirAndroid}/debug/x86/android/")) {
        include 'gdb.setup'
        into 'lib/x86'
    }

    from (file("${androidNdkLocation}/prebuilt/android-x86/gdbserver/gdbserver")) {
        into "lib/x86"
    }
    from (file("${androidNdkLocation}/prebuilt/android-arm/gdbserver/gdbserver")) {
        into "lib/armeabi"
    }
    classifier 'native-android-gdb'
}

//Junit tests for re-use on qeo-android
task jarTests(type: Jar) {
    from (sourceSets.test.output) {
        exclude 'org/qeo/testframework/*'
        exclude 'org/qeo/javaonly/*'
        exclude 'org/qeo/jni/*'
    }
    classifier 'tests'
}

task jarJniTests(type: Jar) {
    from (sourceSets.test.output) {
        include 'org/qeo/jni/*'
    }
    classifier 'jnitests'
}

//Generic test library to be used in all qeo junit tests
task jarTestLib(type: Jar) {
    from (sourceSets.test.output) {
        include 'org/qeo/testframework/*'
        exclude 'org/qeo/testframework/impl/*'
    }
    from 'src/test/data/'
    classifier 'testlib'
}

//Host implementation to be used on qeo junit tests that run on host
task jarTestLibHost(type: Jar) {
    from (sourceSets.test.output) {
        include 'org/qeo/testframework/impl/*'
    }
    classifier 'testlib-host'
}

// javaDoc
task jarJavaDoc(type: Jar, dependsOn:javadoc) {
    classifier = 'javadoc'
    from javadoc.destinationDir
}

// javaSources
task jarJavaSources(type: Jar) {
    classifier = 'sources'
    from sourceSets.main.allSource
}

test {
    def osArch = System.getProperty("os.arch")
    def osName = System.getProperty("os.name")
    environment << ["TDDS_RTPS_MODE": "disabled"]
    jvmArgs "-Djava.library.path=${buildDirHost}/debug/${osArch}/${osName}"
    //jvmArgs "-Djava.library.path=${buildDirHost}/release/${osArch}/${osName}"
    testLogging {
        info {
            // set options for log level INFO
            events "started", "skipped", "failed", "passed", "standard_out", "standard_error"
        }
    }
}

test.dependsOn generateBinariesHost

clean.doFirst {
    project.delete "output"
    project.delete "api/symbols/libqeoJNI.ldver"
}

task assembleHost {
    group "build"
    description "Build and package native libraries for host"
    dependsOn jarNativeHost
    doFirst {
        artifacts {
            archives             jarNativeHost
            nativeHost           jarNativeHost
        }
    }
}

task assembleAndroid {
    group "build"
    description "Build and package native libraries for android"
    dependsOn jarNativeAndroidRelease, jarNativeAndroidReleaseSymbols, jarNativeAndroidDebug, jarNativeAndroidGdb
    doFirst {
        artifacts {
            //put native libraries both in archives configuration as it's own
            //the own configuration is needed for other projects to be able to depend on that specific configuration
            //the archives configuration is needed for the uploadOverlay task to work
            archives             jarNativeAndroidRelease
            archives             jarNativeAndroidReleaseSymbols
            nativeAndroidRelease jarNativeAndroidRelease
            archives             jarNativeAndroidDebug
            nativeAndroidDebug   jarNativeAndroidDebug
            archives             jarNativeAndroidGdb
        }
    }
}

project.tasks.assemble.dependsOn(assembleHost)
project.tasks.assemble.dependsOn(assembleAndroid)
if (tasks.findByPath("uploadOverlay") != null) {
    tasks.uploadOverlay.mustRunAfter assembleHost
    tasks.uploadOverlay.mustRunAfter assembleAndroid
}

dependencies {
    compile project(':qeo-java-core')
    testCompile 'junit:junit:3.8.2'

    //to be able to generate code for unit tests
    generated "org.tinq:tinq-qdm:${project.qeoVersion}:@zip"
    generated "org.tinq:tinq-qdm:${project.qeoVersion}:applications@zip"
}

artifacts {
    archives jarJavaDoc
    archives jarJavaSources
    archives jarTests
    archives jarJniTests
    archives jarTestLib
    archives jarTestLibHost

}

